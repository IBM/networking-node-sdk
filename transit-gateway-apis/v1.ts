/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.10.3-18e3fe12-20200803-172650
 */
 

import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { Authenticator, BaseService, getAuthenticatorFromEnvironment, getMissingParams, UserOptions } from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 */

class TransitGatewayApisV1 extends BaseService {

  static DEFAULT_SERVICE_URL: string = 'https://transit.cloud.ibm.com/v1';
  static DEFAULT_SERVICE_NAME: string = 'transit_gateway_apis';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of TransitGatewayApisV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {TransitGatewayApisV1}
   */

  public static newInstance(options: UserOptions): TransitGatewayApisV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new TransitGatewayApisV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }


  /** Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date up to the current date may
   *  be provided. Specify the current date to request the latest version.
   */
  version: string;

  /**
   * Construct a TransitGatewayApisV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} options.version - Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date
   * up to the current date may be provided. Specify the current date to request the latest version.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/v1'). The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {TransitGatewayApisV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    const requiredParams = ['version'];
    const missingParams = getMissingParams(options, requiredParams);
    if (missingParams) {
      throw missingParams;
    }
    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(TransitGatewayApisV1.DEFAULT_SERVICE_URL);
    }
    this.version = options.version;
  }

  /*************************
   * transitConnections
   ************************/

  /**
   * Retrieves all connections.
   *
   * List all transit gateway connections associated with this account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {number} [params.limit] - The maximum number of resources to return per page.
   * @param {string} [params.start] - A server supplied token determining which resource to start the page on.
   * @param {string} [params.networkId] - Search for connections with the given network_id value.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitConnectionCollection>>}
   */
  public listConnections(params?: TransitGatewayApisV1.ListConnectionsParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitConnectionCollection>> {
    const _params = Object.assign({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'version': this.version,
        'limit': _params.limit,
        'start': _params.start,
        'network_id': _params.networkId
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'listConnections');

      const parameters = {
        options: {
          url: '/connections',
          method: 'GET',
          qs: query,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * transitGateways
   ************************/

  /**
   * Retrieves all Transit Gateways.
   *
   * List all Transit Gateways in account the caller is authorized to view.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {number} [params.limit] - The maximum number of resources to return per page.
   * @param {string} [params.start] - A server supplied token determining which resource to start the page on.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayCollection>>}
   */
  public listTransitGateways(params?: TransitGatewayApisV1.ListTransitGatewaysParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayCollection>> {
    const _params = Object.assign({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'version': this.version,
        'limit': _params.limit,
        'start': _params.start
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'listTransitGateways');

      const parameters = {
        options: {
          url: '/transit_gateways',
          method: 'GET',
          qs: query,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Creates a Transit Gateway.
   *
   * Create a Transit Gateway based on the supplied input template.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.location - Location of Transit Gateway Services.
   * @param {string} params.name - Name Transit Gateway Services.
   * @param {boolean} [params.global] - Allow global routing for a Transit Gateway. If unspecified, the default value is
   * false.
   * @param {ResourceGroupIdentity} [params.resourceGroup] - The resource group to use. If unspecified, the account's
   * [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public createTransitGateway(params: TransitGatewayApisV1.CreateTransitGatewayParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['location', 'name'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'location': _params.location,
        'name': _params.name,
        'global': _params.global,
        'resource_group': _params.resourceGroup
      };

      const query = {
        'version': this.version
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'createTransitGateway');

      const parameters = {
        options: {
          url: '/transit_gateways',
          method: 'POST',
          body,
          qs: query,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Deletes specified Transit Gateway.
   *
   * This request deletes a Transit Gateway. This operation cannot be reversed. For this request to succeed, the Transit
   * Gateway must not contain connections.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>>}
   */
  public deleteTransitGateway(params: TransitGatewayApisV1.DeleteTransitGatewayParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteTransitGateway');

      const parameters = {
        options: {
          url: '/transit_gateways/{id}',
          method: 'DELETE',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Retrieves specified Transit Gateway.
   *
   * This request retrieves a single Transit Gateway specified by the identifier in the URL.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public getTransitGateway(params: TransitGatewayApisV1.GetTransitGatewayParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'getTransitGateway');

      const parameters = {
        options: {
          url: '/transit_gateways/{id}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Updates specified Transit Gateway.
   *
   * This request updates a Transit Gateway's name and/or global flag.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {boolean} [params.global] - Allow global routing for a Transit Gateway.
   * @param {string} [params.name] - The user-defined name for this transit gateway.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public updateTransitGateway(params: TransitGatewayApisV1.UpdateTransitGatewayParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'global': _params.global,
        'name': _params.name
      };

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'updateTransitGateway');

      const parameters = {
        options: {
          url: '/transit_gateways/{id}',
          method: 'PATCH',
          body,
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * transitGatewaysNetworkConnections
   ************************/

  /**
   * Retrieves all connections in a Transit Gateway.
   *
   * This request retrieves all connections in a Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCollection>>}
   */
  public listTransitGatewayConnections(params: TransitGatewayApisV1.ListTransitGatewayConnectionsParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCollection>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'listTransitGatewayConnections');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Add connection to a Transit Gateway.
   *
   * Add a connection to Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.networkType - Defines what type of network is connected via this connection. For access to
   * gre_tunnel connections contact IBM support.
   * @param {string} [params.baseConnectionId] - network_type 'gre_tunnel' connections must be created over an existing
   * network_type 'classic' connection. This field is required for 'gre_tunnel' connections and must specify the ID of
   * an active transit gateway network_type 'classic' connection in the same transit gateway. Omit 'base_connection_id'
   * for any connection type other than 'gre_tunnel'.
   * @param {string} [params.localGatewayIp] - Local gateway IP address.  This field is required for and only applicable
   * to type gre_tunnel connections.
   * @param {string} [params.localTunnelIp] - Local tunnel IP address.  This field is required for and only applicable
   * to type gre_tunnel connections.  The  local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30
   * network.  Neither can be the network nor broadcast addresses.
   * @param {string} [params.name] - The user-defined name for this transit gateway connection. Network type 'vpc'
   * connections are defaulted to the name of the VPC.  Network type 'classic' connections are named 'Classic'.   Name
   * specification is required for network type 'gre_tunnel' connections.
   * @param {string} [params.networkAccountId] - The ID of the account which owns the network that is being connected.
   * Generally only used if the network is in a different account than the gateway. This field is required to be
   * unspecified for network type 'gre_tunnel'.
   * @param {string} [params.networkId] - The ID of the network being connected via this connection. This field is
   * required for some types, such as 'vpc'. For network type 'vpc' this is the CRN of the VPC to be connected. This
   * field is required to be unspecified for network type 'classic' and 'gre_tunnel' connections.
   * @param {string} [params.remoteBgpAsn] - Remote network BGP ASN.  This field is only applicable to 'gre_tunnel' type
   * connections. The following ASN values are reserved and unavailable 64512-64513, 65100, 65201-65234, 65402-65433,
   * 65500 and 4201065000-4201065999. If 'remote_bgp_asn' is omitted on gre_tunnel connection create requests IBM will
   * assign an ASN.
   * @param {string} [params.remoteGatewayIp] - Remote gateway IP address.  This field is required for and only
   * applicable to type gre_tunnel connections.
   * @param {string} [params.remoteTunnelIp] - Remote tunnel IP address.  This field is required for and only applicable
   * to type gre_tunnel connections.  The  local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30
   * network.  Neither can be the network nor broadcast addresses.
   * @param {ZoneIdentity} [params.zone] - For network_type 'gre_tunnel' connections specify the connection's location.
   * The specified availability zone must reside in the gateway's region.
   * Use the IBM Cloud global catalog to list zones within the desired region.
   * This field is required for and only applicable to network type 'gre_tunnel' connections.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public createTransitGatewayConnection(params: TransitGatewayApisV1.CreateTransitGatewayConnectionParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId', 'networkType'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'network_type': _params.networkType,
        'base_connection_id': _params.baseConnectionId,
        'local_gateway_ip': _params.localGatewayIp,
        'local_tunnel_ip': _params.localTunnelIp,
        'name': _params.name,
        'network_account_id': _params.networkAccountId,
        'network_id': _params.networkId,
        'remote_bgp_asn': _params.remoteBgpAsn,
        'remote_gateway_ip': _params.remoteGatewayIp,
        'remote_tunnel_ip': _params.remoteTunnelIp,
        'zone': _params.zone
      };

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'createTransitGatewayConnection');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections',
          method: 'POST',
          body,
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Remove connection from Transit Gateway.
   *
   * After the specified connection is detached, entities still within the Transit Gateway will no longer be able to
   * communicate directly to it through the IBM Cloud private backbone.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>>}
   */
  public deleteTransitGatewayConnection(params: TransitGatewayApisV1.DeleteTransitGatewayConnectionParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteTransitGatewayConnection');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
          method: 'DELETE',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Retrieves specified Transit Gateway connection.
   *
   * This request retrieves a connection from the Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public getTransitGatewayConnection(params: TransitGatewayApisV1.GetTransitGatewayConnectionParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'getTransitGatewayConnection');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Updates specified Transit Gateway connection.
   *
   * Update the name of a connection to a Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} [params.name] - The user-defined name for this transit gateway. If specified as empty string or
   * nil,  the name will be the network name (the name of the VPC in the case of network type 'vpc',  and the word
   * Classic, in the case of network type 'classic').
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public updateTransitGatewayConnection(params: TransitGatewayApisV1.UpdateTransitGatewayConnectionParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'name': _params.name
      };

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'updateTransitGatewayConnection');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
          method: 'PATCH',
          body,
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Perform actions on a connection for a Transit Gateway.
   *
   * Allow a network owner to approve or reject a cross-account connection request.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.action - The action that is to be performed against the connection request.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>>}
   */
  public createTransitGatewayConnectionActions(params: TransitGatewayApisV1.CreateTransitGatewayConnectionActionsParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.Empty>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['transitGatewayId', 'id', 'action'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'action': _params.action
      };

      const query = {
        'version': this.version
      };

      const path = {
        'transit_gateway_id': _params.transitGatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'createTransitGatewayConnectionActions');

      const parameters = {
        options: {
          url: '/transit_gateways/{transit_gateway_id}/connections/{id}/actions',
          method: 'POST',
          body,
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * transitLocation
   ************************/

  /**
   * List all locations that support Transit Gateways.
   *
   * List all locations that support Transit Gateways.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSCollection>>}
   */
  public listGatewayLocations(params?: TransitGatewayApisV1.ListGatewayLocationsParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSCollection>> {
    const _params = Object.assign({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'version': this.version
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayLocations');

      const parameters = {
        options: {
          url: '/locations',
          method: 'GET',
          qs: query,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Show the details of a given Transit Gateway location.
   *
   * Get the details of a Transit Gateway Location.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.name - The Transit Gateway location Name.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSLocation>>}
   */
  public getGatewayLocation(params: TransitGatewayApisV1.GetGatewayLocationParams): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSLocation>> {
    const _params = Object.assign({}, params);
    const requiredParams = ['name'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'name': _params.name
      };

      const sdkHeaders = getSdkHeaders(TransitGatewayApisV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayLocation');

      const parameters = {
        options: {
          url: '/locations/{name}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: Object.assign({}, this.baseOptions, {
          headers: Object.assign(sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

}

/*************************
 * interfaces
 ************************/

namespace TransitGatewayApisV1 {

  /** Options for the `TransitGatewayApisV1` constructor. */
  export interface Options extends UserOptions {

    /** Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date up to the current date may
     *  be provided. Specify the current date to request the latest version.
     */
    version: string;
  }

  /** An operation response. */
  export interface Response<T = any>  {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty { }

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listConnections` operation. */
  export interface ListConnectionsParams {
    /** The maximum number of resources to return per page. */
    limit?: number;
    /** A server supplied token determining which resource to start the page on. */
    start?: string;
    /** Search for connections with the given network_id value. */
    networkId?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTransitGateways` operation. */
  export interface ListTransitGatewaysParams {
    /** The maximum number of resources to return per page. */
    limit?: number;
    /** A server supplied token determining which resource to start the page on. */
    start?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGateway` operation. */
  export interface CreateTransitGatewayParams {
    /** Location of Transit Gateway Services. */
    location: string;
    /** Name Transit Gateway Services. */
    name: string;
    /** Allow global routing for a Transit Gateway. If unspecified, the default value is false. */
    global?: boolean;
    /** The resource group to use. If unspecified, the account's [default resource
     *  group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
     */
    resourceGroup?: ResourceGroupIdentity;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTransitGateway` operation. */
  export interface DeleteTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGateway` operation. */
  export interface GetTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateTransitGateway` operation. */
  export interface UpdateTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    /** Allow global routing for a Transit Gateway. */
    global?: boolean;
    /** The user-defined name for this transit gateway. */
    name?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTransitGatewayConnections` operation. */
  export interface ListTransitGatewayConnectionsParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGatewayConnection` operation. */
  export interface CreateTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** Defines what type of network is connected via this connection. For access to gre_tunnel connections contact
     *  IBM support.
     */
    networkType: CreateTransitGatewayConnectionConstants.NetworkType | string;
    /** network_type 'gre_tunnel' connections must be created over an existing network_type 'classic' connection.
     *  This field is required for 'gre_tunnel' connections and must specify the ID of an active transit gateway
     *  network_type 'classic' connection in the same transit gateway. Omit 'base_connection_id' for any connection type
     *  other than 'gre_tunnel'.
     */
    baseConnectionId?: string;
    /** Local gateway IP address.  This field is required for and only applicable to type gre_tunnel connections. */
    localGatewayIp?: string;
    /** Local tunnel IP address.  This field is required for and only applicable to type gre_tunnel connections.
     *  The  local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30 network.  Neither can be the network
     *  nor broadcast addresses.
     */
    localTunnelIp?: string;
    /** The user-defined name for this transit gateway connection. Network type 'vpc'  connections are defaulted to
     *  the name of the VPC.  Network type 'classic' connections are named 'Classic'.   Name specification is required
     *  for network type 'gre_tunnel' connections.
     */
    name?: string;
    /** The ID of the account which owns the network that is being connected. Generally only used if the network is
     *  in a different account than the gateway. This field is required to be unspecified for network type 'gre_tunnel'.
     */
    networkAccountId?: string;
    /** The ID of the network being connected via this connection. This field is required for some types, such as
     *  'vpc'. For network type 'vpc' this is the CRN of the VPC to be connected. This field is required to be
     *  unspecified for network type 'classic' and 'gre_tunnel' connections.
     */
    networkId?: string;
    /** Remote network BGP ASN.  This field is only applicable to 'gre_tunnel' type connections. The following ASN
     *  values are reserved and unavailable 64512-64513, 65100, 65201-65234, 65402-65433, 65500 and
     *  4201065000-4201065999. If 'remote_bgp_asn' is omitted on gre_tunnel connection create requests IBM will assign
     *  an ASN.
     */
    remoteBgpAsn?: string;
    /** Remote gateway IP address.  This field is required for and only applicable to type gre_tunnel connections. */
    remoteGatewayIp?: string;
    /** Remote tunnel IP address.  This field is required for and only applicable to type gre_tunnel connections.
     *  The  local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30 network.  Neither can be the network
     *  nor broadcast addresses.
     */
    remoteTunnelIp?: string;
    /** For network_type 'gre_tunnel' connections specify the connection's location.  The specified availability
     *  zone must reside in the gateway's region.
     *  Use the IBM Cloud global catalog to list zones within the desired region.
     *  This field is required for and only applicable to network type 'gre_tunnel' connections.
     */
    zone?: ZoneIdentity;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createTransitGatewayConnection` operation. */
  export namespace CreateTransitGatewayConnectionConstants {
    /** Defines what type of network is connected via this connection. For access to gre_tunnel connections contact IBM support. */
    export enum NetworkType {
      VPC = 'vpc',
      CLASSIC = 'classic',
      GRE_TUNNEL = 'gre_tunnel',
    }
  }

  /** Parameters for the `deleteTransitGatewayConnection` operation. */
  export interface DeleteTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGatewayConnection` operation. */
  export interface GetTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateTransitGatewayConnection` operation. */
  export interface UpdateTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** The user-defined name for this transit gateway. If specified as empty string or nil,  the name will be the
     *  network name (the name of the VPC in the case of network type 'vpc',  and the word Classic, in the case of
     *  network type 'classic').
     */
    name?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGatewayConnectionActions` operation. */
  export interface CreateTransitGatewayConnectionActionsParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** The action that is to be performed against the connection request. */
    action: CreateTransitGatewayConnectionActionsConstants.Action | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createTransitGatewayConnectionActions` operation. */
  export namespace CreateTransitGatewayConnectionActionsConstants {
    /** The action that is to be performed against the connection request. */
    export enum Action {
      APPROVE = 'approve',
      REJECT = 'reject',
    }
  }

  /** Parameters for the `listGatewayLocations` operation. */
  export interface ListGatewayLocationsParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayLocation` operation. */
  export interface GetGatewayLocationParams {
    /** The Transit Gateway location Name. */
    name: string;
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** The resource group to use. If unspecified, the account's [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupIdentity {
    /** The unique identifier for this resource group. */
    id: string;
  }

  /** The resource group to use. If unspecified, the account's [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupReference {
    /** The unique identifier for this resource group. */
    id: string;
    /** The URL for this resource group. */
    href: string;
  }

  /** A list of Transit Gateway locations. */
  export interface TSCollection {
    /** Collection of Transit Gateway locations. */
    locations: TSLocationBasic[];
  }

  /** Details of a local connection location. */
  export interface TSLocalLocation {
    /** A descriptive display name for the location. */
    display_name?: string;
    /** The name of the location. */
    name?: string;
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence. The list of enumerated values for this property may expand in the future. Code and processes using
     *  this field must tolerate unexpected values.
     */
    type?: string;
  }

  /** Details of a Transit Gateway location. */
  export interface TSLocation {
    /** The geographical location of this location, used for billing purposes. */
    billing_location: string;
    /** Name of the Location. */
    name: string;
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence.
     */
    type: string;
    /** The set of network locations that are considered local for this Transit Gateway location. */
    local_connection_locations: TSLocalLocation[];
  }

  /** Details of a Transit Gateway location. */
  export interface TSLocationBasic {
    /** The geographical location of this location, used for billing purposes. */
    billing_location: string;
    /** Name of the Location. */
    name: string;
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence.
     */
    type: string;
  }

  /** Transit gateway connection. */
  export interface TransitConnection {
    /** network_type 'gre_tunnel' connections use 'base_connection_id' to specify the id of a network_type 'classic'
     *  connection the tunnel is configured over. The specified connection must reside in the same transit gateway and
     *  be in an active state. The 'classic' connection cannot be deleted until any 'gre_tunnel' connections using it
     *  are deleted. This field only applies to and is required for network type 'gre_tunnel' connections.
     */
    base_connection_id?: string;
    /** The date and time that this connection was created. */
    created_at: string;
    /** The unique identifier for this connection. */
    id: string;
    /** Local network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    local_bgp_asn?: number;
    /** Local gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_gateway_ip?: string;
    /** Local tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_tunnel_ip?: string;
    /** GRE tunnel MTU.  This field only applies to network type 'gre_tunnel' connections. */
    mtu?: number;
    /** The user-defined name for this transit gateway connection. */
    name: string;
    /** The ID of the account which owns the connected network. Generally only used if the network is in a different
     *  IBM Cloud account than the gateway.
     */
    network_account_id?: string;
    /** The ID of the network being connected via this connection. This field is required for some types, such as
     *  'vpc'. For network type 'vpc' this is the CRN of the VPC to be connected.
     */
    network_id?: string;
    /** Defines what type of network is connected via this connection. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field must tolerate unexpected values.
     */
    network_type: string;
    /** Remote network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    remote_bgp_asn?: number;
    /** Remote gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_gateway_ip?: string;
    /** Remote tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_tunnel_ip?: string;
    /** Only visible for cross account connections, this field represents the status of a connection request between
     *  IBM Cloud accounts. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field must tolerate unexpected values.
     */
    request_status?: string;
    /** Connection state. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field must tolerate unexpected values.
     */
    status: string;
    /** Reference to the transit gateway that contains this connection. */
    transit_gateway: TransitGatewayReference;
    /** The date and time that this connection was last updated. */
    updated_at?: string;
    /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' connections. */
    zone?: ZoneReference;
  }

  /** Transit gateway connections. */
  export interface TransitConnectionCollection {
    /** Array of transit gateway connections. */
    connections: TransitConnection[];
    /** A reference to the first page of resources. */
    first: TransitConnectionCollectionFirst;
    /** The maximum number of connections returned on one request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: TransitConnectionCollectionNext;
  }

  /** A reference to the first page of resources. */
  export interface TransitConnectionCollectionFirst {
    /** url. */
    href: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface TransitConnectionCollectionNext {
    /** url. */
    href?: string;
    /** server generated start token for next page of resources. */
    start?: string;
  }

  /** Details of a Transit Gateway. */
  export interface TransitGateway {
    /** The unique identifier for this Transit Gateway. */
    id: string;
    /** The CRN for this Transit Gateway. */
    crn: string;
    /** A human readable name for the transit gateway. */
    name: string;
    /** Location of Transit Gateway Services. */
    location: string;
    /** The date and time that this gateway was created. */
    created_at: string;
    /** Allow global routing for a Transit Gateway. */
    global: boolean;
    /** The resource group to use. If unspecified, the account's [default resource
     *  group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
     */
    resource_group?: ResourceGroupReference;
    /** The status of the Transit Gateway. The list of enumerated values for this property may expand in the future.
     *  Code and processes using this field must tolerate unexpected values.
     */
    status: string;
    /** The date and time that this gateway was last updated. */
    updated_at?: string;
  }

  /** A list of Transit Gateways. */
  export interface TransitGatewayCollection {
    /** A reference to the first page of resources. */
    first: TransitGatewayCollectionFirst;
    /** The maximum number of gateways returned on one request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: TransitGatewayCollectionNext;
    /** Collection of Transit Services gateways. */
    transit_gateways: TransitGateway[];
  }

  /** A reference to the first page of resources. */
  export interface TransitGatewayCollectionFirst {
    /** url. */
    href: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface TransitGatewayCollectionNext {
    /** url. */
    href: string;
    /** server generated start token for next page of resources. */
    start: string;
  }

  /** A set of Transit Gateway network connections. */
  export interface TransitGatewayConnectionCollection {
    /** Array of transit gateways network Connections. */
    connections: TransitGatewayConnectionCust[];
  }

  /** Connection included in transit gateway. */
  export interface TransitGatewayConnectionCust {
    /** The user-defined name for this transit gateway connection. */
    name: string;
    /** The ID of the network being connected via this connection. This field is required for some types, such as
     *  'vpc'. For network type 'vpc' this is the CRN of the VPC to be connected.
     */
    network_id?: string;
    /** Defines what type of network is connected via this connection. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field must tolerate unexpected values.
     */
    network_type: string;
    /** The unique identifier for this Transit Gateway Connection. */
    id: string;
    /** network_type 'gre_tunnel' connections use 'base_connection_id' to specify the ID of a network_type 'classic'
     *  connection the tunnel is configured over. The specified connection must reside in the same transit gateway and
     *  be in an active state. The 'classic' connection cannot be deleted until any 'gre_tunnel' connections using it
     *  are deleted. This field only applies to and is required for network type 'gre_tunnel' connections.
     */
    base_connection_id?: string;
    /** The date and time that this connection was created. */
    created_at: string;
    /** Local network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    local_bgp_asn?: number;
    /** Local gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_gateway_ip?: string;
    /** Local tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_tunnel_ip?: string;
    /** GRE tunnel MTU.  This field only applies to network type 'gre_tunnel' connections. */
    mtu?: number;
    /** The ID of the account which owns the connected network. Generally only used if the network is in a different
     *  IBM Cloud account than the gateway.
     */
    network_account_id?: string;
    /** Remote network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    remote_bgp_asn?: number;
    /** Remote gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_gateway_ip?: string;
    /** Remote tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_tunnel_ip?: string;
    /** Only visible for cross account connections, this field represents the status of a connection request between
     *  IBM Cloud accounts. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field must tolerate unexpected values.
     */
    request_status?: string;
    /** Connection's current configuration state. The list of enumerated values for this property may expand in the
     *  future. Code and processes using this field must tolerate unexpected values.
     */
    status?: string;
    /** The date and time that this connection was last updated. */
    updated_at?: string;
    /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' connections. */
    zone?: TransitGatewayConnectionCustZone;
  }

  /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' connections. */
  export interface TransitGatewayConnectionCustZone {
    /** Availability zone name. */
    name: string;
  }

  /** Transit gateway reference. */
  export interface TransitGatewayReference {
    /** gateway CRN. */
    crn: string;
    /** gateway ID. */
    id: string;
    /** transit gateway name. */
    name: string;
  }

  /** ZoneIdentity. */
  export interface ZoneIdentity {
  }

  /** Availability zone reference. */
  export interface ZoneReference {
    /** Availability zone name. */
    name: string;
  }

  /** Availability zone. */
  export interface ZoneIdentityByName extends ZoneIdentity {
    /** Availability zone name. */
    name?: string;
  }

}

export = TransitGatewayApisV1;
