/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.73.0-eeee85a9-20230607-165104
 */

/* eslint-disable max-classes-per-file */
/* eslint-disable no-await-in-loop */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  getAuthenticatorFromEnvironment,
  validateParams,
  UserOptions,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API Version: __VERSION__
 */

class TransitGatewayApisV1 extends BaseService {
  static DEFAULT_SERVICE_URL: string = 'https://transit.cloud.ibm.com/v1';

  static DEFAULT_SERVICE_NAME: string = 'transit_gateway_apis';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of TransitGatewayApisV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {TransitGatewayApisV1}
   */

  public static newInstance(options: UserOptions): TransitGatewayApisV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new TransitGatewayApisV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /** Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date up to the current date may
   *  be provided. Specify the current date to request the latest version.
   */
  version: string;

  /**
   * Construct a TransitGatewayApisV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} options.version - Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date
   * up to the current date may be provided. Specify the current date to request the latest version.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {TransitGatewayApisV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    const _requiredParams = ['version'];
    const _validationErrors = validateParams(options, _requiredParams, null);
    if (_validationErrors) {
      throw _validationErrors;
    }
    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(TransitGatewayApisV1.DEFAULT_SERVICE_URL);
    }
    this.version = options.version;
  }

  /*************************
   * transitGateways
   ************************/

  /**
   * Retrieves all Transit Gateways.
   *
   * List all Transit Gateways in account the caller is authorized to view.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {number} [params.limit] - The maximum number of resources to return per page.
   * @param {string} [params.start] - A server supplied token determining which resource to start the page on.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayCollection>>}
   */
  public listTransitGateways(
    params?: TransitGatewayApisV1.ListTransitGatewaysParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayCollection>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['limit', 'start', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
      'limit': _params.limit,
      'start': _params.start,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTransitGateways'
    );

    const parameters = {
      options: {
        url: '/transit_gateways',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Creates a Transit Gateway.
   *
   * Create a Transit Gateway based on the supplied input template.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.location - Location of Transit Gateway Services.
   * @param {string} params.name - Name Transit Gateway Services.
   * @param {boolean} [params.global] - Allow global routing for a Transit Gateway. If unspecified, the default value is
   * false.
   * @param {ResourceGroupIdentity} [params.resourceGroup] - The resource group to use. If unspecified, the account's
   * [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public createTransitGateway(
    params: TransitGatewayApisV1.CreateTransitGatewayParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = { ...params };
    const _requiredParams = ['location', 'name'];
    const _validParams = ['location', 'name', 'global', 'resourceGroup', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'location': _params.location,
      'name': _params.name,
      'global': _params.global,
      'resource_group': _params.resourceGroup,
    };

    const query = {
      'version': this.version,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTransitGateway'
    );

    const parameters = {
      options: {
        url: '/transit_gateways',
        method: 'POST',
        body,
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Deletes specified Transit Gateway.
   *
   * This request deletes a Transit Gateway. This operation cannot be reversed. For this request to succeed, the Transit
   * Gateway must not contain connections.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>>}
   */
  public deleteTransitGateway(
    params: TransitGatewayApisV1.DeleteTransitGatewayParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTransitGateway'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves specified Transit Gateway.
   *
   * This request retrieves a single Transit Gateway specified by the identifier in the URL.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public getTransitGateway(
    params: TransitGatewayApisV1.GetTransitGatewayParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getTransitGateway'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Updates specified Transit Gateway.
   *
   * This request updates a Transit Gateway's name and/or global flag.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The Transit Gateway identifier.
   * @param {boolean} [params.global] - Allow global routing for a Transit Gateway.
   * @param {string} [params.name] - The user-defined name for this transit gateway.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>>}
   */
  public updateTransitGateway(
    params: TransitGatewayApisV1.UpdateTransitGatewayParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGateway>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'global', 'name', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'global': _params.global,
      'name': _params.name,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateTransitGateway'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * transitConnections
   ************************/

  /**
   * Retrieves all connections.
   *
   * List all transit gateway connections associated with this account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {number} [params.limit] - The maximum number of resources to return per page.
   * @param {string} [params.start] - A server supplied token determining which resource to start the page on.
   * @param {string} [params.networkId] - Search for connections with the given network_id value.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitConnectionCollection>>}
   */
  public listConnections(
    params?: TransitGatewayApisV1.ListConnectionsParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitConnectionCollection>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['limit', 'start', 'networkId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
      'limit': _params.limit,
      'start': _params.start,
      'network_id': _params.networkId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listConnections'
    );

    const parameters = {
      options: {
        url: '/connections',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * transitGatewaysNetworkConnections
   ************************/

  /**
   * Retrieves all connections in a Transit Gateway.
   *
   * This request retrieves all connections in a Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} [params.start] - A server supplied token determining which resource to start the page on.
   * @param {number} [params.limit] - The maximum number of resources to return per page.
   * @param {string} [params.name] - Search for connections with the given name.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCollection>>}
   */
  public listTransitGatewayConnections(
    params: TransitGatewayApisV1.ListTransitGatewayConnectionsParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCollection>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId'];
    const _validParams = ['transitGatewayId', 'start', 'limit', 'name', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
      'start': _params.start,
      'limit': _params.limit,
      'name': _params.name,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTransitGatewayConnections'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Add connection to a Transit Gateway.
   *
   * Add a connection to Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.networkType - Defines what type of network is connected via this connection. For access to
   * gre_tunnel or unbound_gre_tunnel connections contact IBM support.
   * @param {string} [params.baseConnectionId] - Deprecated: network_type 'gre_tunnel' connections must be created over
   * an existing network_type 'classic' connection. This field must specify the ID of an active transit gateway
   * network_type 'classic' connection in the same transit gateway.
   *
   * This field is required for network type 'gre_tunnel' connections.
   *
   * This field is required to be unspecified for network type 'classic', 'directlink', 'vpc', 'power_virtual_server'
   * and 'unbound_gre_tunnel' connections.
   * @param {string} [params.baseNetworkType] - The type of network the Unbound GRE tunnel is targeting. This field is
   * required for network type 'unbound_gre_tunnel' connections. This field is required to be unspecified for network
   * type 'classic', 'directlink', 'vpc', 'power_virtual_server' and 'gre_tunnel' connections.
   * @param {string} [params.localGatewayIp] - Local gateway IP address. This field is required for network type
   * 'gre_tunnel' and 'unbound_gre_tunnel' connections. This field is required to be unspecified for network type
   * 'classic', 'directlink', 'vpc' and 'power_virtual_server' connections.
   * @param {string} [params.localTunnelIp] - Local tunnel IP address. The local_tunnel_ip and remote_tunnel_ip
   * addresses must be in the same /30 network. Neither can be the network nor broadcast addresses.
   *
   * This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   *
   * This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server'
   * connections.
   * @param {string} [params.name] - The user-defined name for this transit gateway connection. Network type 'vpc'
   * connections are defaulted to the name of the VPC.  Network type 'classic' connections are named 'Classic'.
   *
   * This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   *
   * This field is optional for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server' connections.
   * @param {string} [params.networkAccountId] - The ID of the account which owns the network that is being connected.
   * Generally only used if the network is in a different account than the gateway. This field is required for type
   * 'unbound_gre_tunnel' when the associated_network_type is 'classic' and the GRE tunnel is in a different account
   * than the gateway.
   * @param {string} [params.networkId] - The ID of the network being connected via this connection. For network types
   * 'vpc','power_virtual_server' and 'directlink' this is the CRN of the VPC / PowerVS / Direct Link gateway
   * respectively. This field is required for network type 'vpc', 'power_virtual_server' and 'directlink' connections.
   * This field is required to be unspecified for network type 'classic', 'gre_tunnel' and 'unbound_gre_tunnel'
   * connections.
   * @param {TransitGatewayConnectionPrefixFilter[]} [params.prefixFilters] - Array of prefix route filters for a
   * transit gateway connection. Prefix filters can be specified for netowrk type 'vpc', 'classic',
   * 'power_virtual_server' and 'directlink' connections. They are not allowed for type 'gre_tunnel' connections. This
   * is order dependent with those first in the array being applied first, and those at the end of the array being
   * applied last, or just before applying the default. This field is optional for network type 'classic', 'vpc',
   * 'directlink', and 'power_virtual_server' connections. This field is required to be unspecified for network type
   * 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   * @param {string} [params.prefixFiltersDefault] - Default setting of permit or deny which applies to any routes that
   * don't match a specified filter. This field is optional for network type 'classic', 'vpc', 'directlink', and
   * 'power_virtual_server' connections. This field is required to be unspecified for network type 'gre_tunnel' and
   * 'unbound_gre_tunnel' connections.
   * @param {number} [params.remoteBgpAsn] - Remote network BGP ASN. The following ASN values are reserved and
   * unavailable 0, 13884, 36351, 64512-64513, 65100, 65200-65234, 65402-65433, 65500 and 4201065000-4201065999. If
   * 'remote_bgp_asn' is omitted on gre_tunnel or unbound_gre_tunnel connection create requests IBM will assign an ASN.
   *
   * This field is optional for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   *
   * This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server'
   * connections.
   * @param {string} [params.remoteGatewayIp] - Remote gateway IP address. This field is required for network type
   * 'gre_tunnel' and 'unbound_gre_tunnel' connections. This field is required to be unspecified for network type
   * 'classic', 'directlink', 'vpc' and 'power_virtual_server' connections.
   * @param {string} [params.remoteTunnelIp] - Remote tunnel IP address. The local_tunnel_ip and remote_tunnel_ip
   * addresses must be in the same /30 network. Neither can be the network nor broadcast addresses.
   *
   * This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   *
   * This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server'
   * connections.
   * @param {ZoneIdentity} [params.zone] - Specify the connection's location.  The specified availability zone must
   * reside in the gateway's region.
   * Use the IBM Cloud global catalog to list zones within the desired region.
   *
   * This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
   *
   * This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server'
   * connections.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public createTransitGatewayConnection(
    params: TransitGatewayApisV1.CreateTransitGatewayConnectionParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'networkType'];
    const _validParams = ['transitGatewayId', 'networkType', 'baseConnectionId', 'baseNetworkType', 'localGatewayIp', 'localTunnelIp', 'name', 'networkAccountId', 'networkId', 'prefixFilters', 'prefixFiltersDefault', 'remoteBgpAsn', 'remoteGatewayIp', 'remoteTunnelIp', 'zone', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'network_type': _params.networkType,
      'base_connection_id': _params.baseConnectionId,
      'base_network_type': _params.baseNetworkType,
      'local_gateway_ip': _params.localGatewayIp,
      'local_tunnel_ip': _params.localTunnelIp,
      'name': _params.name,
      'network_account_id': _params.networkAccountId,
      'network_id': _params.networkId,
      'prefix_filters': _params.prefixFilters,
      'prefix_filters_default': _params.prefixFiltersDefault,
      'remote_bgp_asn': _params.remoteBgpAsn,
      'remote_gateway_ip': _params.remoteGatewayIp,
      'remote_tunnel_ip': _params.remoteTunnelIp,
      'zone': _params.zone,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTransitGatewayConnection'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Remove connection from Transit Gateway.
   *
   * After the specified connection is detached, entities still within the Transit Gateway will no longer be able to
   * communicate directly to it through the IBM Cloud private backbone.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>>}
   */
  public deleteTransitGatewayConnection(
    params: TransitGatewayApisV1.DeleteTransitGatewayConnectionParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTransitGatewayConnection'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves specified Transit Gateway connection.
   *
   * This request retrieves a connection from the Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public getTransitGatewayConnection(
    params: TransitGatewayApisV1.GetTransitGatewayConnectionParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getTransitGatewayConnection'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Updates specified Transit Gateway connection.
   *
   * Update the name of a connection to a Transit Gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} [params.name] - The user-defined name for this transit gateway. If specified as empty string or
   * nil,  the name will be the network name (the name of the VPC in the case of network type 'vpc',  and the word
   * Classic, in the case of network type 'classic').
   * @param {string} [params.prefixFiltersDefault] - Default setting of permit or deny which applies to any routes that
   * don't match a specified filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>>}
   */
  public updateTransitGatewayConnection(
    params: TransitGatewayApisV1.UpdateTransitGatewayConnectionParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TransitGatewayConnectionCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'name', 'prefixFiltersDefault', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'prefix_filters_default': _params.prefixFiltersDefault,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateTransitGatewayConnection'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Perform actions on a connection for a Transit Gateway.
   *
   * Allow a network owner to approve or reject a cross-account connection request.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.action - The action that is to be performed against the connection request.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>>}
   */
  public createTransitGatewayConnectionActions(
    params: TransitGatewayApisV1.CreateTransitGatewayConnectionActionsParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'action'];
    const _validParams = ['transitGatewayId', 'id', 'action', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTransitGatewayConnectionActions'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/actions',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * transitLocation
   ************************/

  /**
   * List all locations that support Transit Gateways.
   *
   * List all locations that support Transit Gateways.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSCollection>>}
   */
  public listGatewayLocations(
    params?: TransitGatewayApisV1.ListGatewayLocationsParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSCollection>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listGatewayLocations'
    );

    const parameters = {
      options: {
        url: '/locations',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Show the details of a given Transit Gateway location.
   *
   * Get the details of a Transit Gateway Location.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.name - The Transit Gateway location Name.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSLocation>>}
   */
  public getGatewayLocation(
    params: TransitGatewayApisV1.GetGatewayLocationParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.TSLocation>> {
    const _params = { ...params };
    const _requiredParams = ['name'];
    const _validParams = ['name', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'name': _params.name,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getGatewayLocation'
    );

    const parameters = {
      options: {
        url: '/locations/{name}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * transitGatewayConnectionPrefixFilters
   ************************/

  /**
   * Retrieves all prefix filters in a Transit Gateway connection.
   *
   * This request retrieves all prefix filters in a Transit Gateway connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCollection>>}
   */
  public listTransitGatewayConnectionPrefixFilters(
    params: TransitGatewayApisV1.ListTransitGatewayConnectionPrefixFiltersParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTransitGatewayConnectionPrefixFilters'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Add a prefix filter to a Transit Gateway Connection.
   *
   * Add a prefix filter to a Transit Gateway Connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.action - Whether or not this prefix filter should allow or deny prefixes matching this
   * filter's prefix definition.
   * @param {string} params.prefix - The IPv4 Prefix to be matched by this filter. If both the 'le' and 'ge' are zero,
   * then this filter will only apply to routes that exactly match this prefix, while a non-zero value for either 'le'
   * or 'ge', this filter can apply to multiple routes with different prefix lengths, but will still only apply to
   * prefixes contained in the address space defined by 'prefix'.
   * @param {string} [params.before] - A reference to the prefix filter that will be the next filter applied to the
   * Transit Gateway connection.
   *
   * If this field is blank, this prefix filter will be the last rule applied before the connection's default rule.
   *
   * When a prefix filter is created with the same before field as an existing prefix filter, the existing filter will
   * be applied before the new filter, and the existing filter's before field will be updated accordingly.
   * @param {number} [params.ge] - Defines the minimum matched prefix precision. If this field is non-zero then the
   * filter will match all routes within the 'prefix' that have a prefix length greater than or equal to this value.
   *
   * This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's prefix
   * or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route matching
   * behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
   * 'le' value, inclusive.
   * @param {number} [params.le] - Defines the maximum matched prefix precision. If this field is non-zero then the
   * filter will match all routes within the 'prefix' that have a prefix length less than or equal to this value.
   *
   * This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's prefix
   * or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route matching
   * behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32, inclusive.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>>}
   */
  public createTransitGatewayConnectionPrefixFilter(
    params: TransitGatewayApisV1.CreateTransitGatewayConnectionPrefixFilterParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'action', 'prefix'];
    const _validParams = ['transitGatewayId', 'id', 'action', 'prefix', 'before', 'ge', 'le', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'prefix': _params.prefix,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTransitGatewayConnectionPrefixFilter'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Replaces the prefix filters of the Transit Gateway Connection.
   *
   * Replaces the prefix filters of the Transit Gateway Connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {PrefixFilterPut[]} params.prefixFilters - Array of prefix filters.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCollection>>}
   */
  public replaceTransitGatewayConnectionPrefixFilter(
    params: TransitGatewayApisV1.ReplaceTransitGatewayConnectionPrefixFilterParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'prefixFilters'];
    const _validParams = ['transitGatewayId', 'id', 'prefixFilters', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'prefix_filters': _params.prefixFilters,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'replaceTransitGatewayConnectionPrefixFilter'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters',
        method: 'PUT',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Remove prefix filter from Transit Gateway Connection.
   *
   * Delete a prefix filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.filterId - Prefix filter identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>>}
   */
  public deleteTransitGatewayConnectionPrefixFilter(
    params: TransitGatewayApisV1.DeleteTransitGatewayConnectionPrefixFilterParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'filterId'];
    const _validParams = ['transitGatewayId', 'id', 'filterId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
      'filter_id': _params.filterId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTransitGatewayConnectionPrefixFilter'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters/{filter_id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves specified Transit Gateway connection prefix filter.
   *
   * This request retrieves a prefix filter from the Transit Gateway Connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.filterId - Prefix filter identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>>}
   */
  public getTransitGatewayConnectionPrefixFilter(
    params: TransitGatewayApisV1.GetTransitGatewayConnectionPrefixFilterParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'filterId'];
    const _validParams = ['transitGatewayId', 'id', 'filterId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
      'filter_id': _params.filterId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getTransitGatewayConnectionPrefixFilter'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters/{filter_id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Updates specified Transit Gateway connection prefix filter.
   *
   * Update prefix filter for a Transit Gateway Connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - The connection identifier.
   * @param {string} params.filterId - Prefix filter identifier.
   * @param {string} [params.action] - Whether or not this prefix filter should allow or deny prefixes matching this
   * filter's prefix definition.
   * @param {string} [params.before] - A reference to the prefix filter that will be the next filter applied to the
   * Transit Gateway connection.
   *
   * If this field is blank, this prefix filter will be the last rule applied before the connection's default rule.
   *
   * When a prefix filter is created with the same before field as an existing prefix filter, the existing filter will
   * be applied before the new filter, and the existing filter's before field will be updated accordingly.
   * @param {number} [params.ge] - Defines the minimum matched prefix precision. If this field is non-zero then the
   * filter will match all routes within the 'prefix' that have a prefix length greater or equal to this value.
   *
   * This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's prefix
   * or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route matching
   * behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
   * 'le' value, inclusive.
   * @param {number} [params.le] - Defines the maximum matched prefix precision. If this field is non-zero then the
   * filter will match all routes within the 'prefix' that have a prefix length less than or equal to this value.
   *
   * This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's prefix
   * or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route matching
   * behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32, inclusive.
   * @param {string} [params.prefix] - The IPv4 Prefix to be matched by this filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>>}
   */
  public updateTransitGatewayConnectionPrefixFilter(
    params: TransitGatewayApisV1.UpdateTransitGatewayConnectionPrefixFilterParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.PrefixFilterCust>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id', 'filterId'];
    const _validParams = ['transitGatewayId', 'id', 'filterId', 'action', 'before', 'ge', 'le', 'prefix', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
      'prefix': _params.prefix,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
      'filter_id': _params.filterId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateTransitGatewayConnectionPrefixFilter'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/connections/{id}/prefix_filters/{filter_id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * transitGatewayRouteReports
   ************************/

  /**
   * List route reports.
   *
   * Retrieve all route reports for the specified Transit Gateway.  There will normally be at most one completed report
   * and one pending report.  Additionally, completed route reports are written to IBM Cloud Activity Tracker.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReportCollection>>}
   */
  public listTransitGatewayRouteReports(
    params: TransitGatewayApisV1.ListTransitGatewayRouteReportsParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReportCollection>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId'];
    const _validParams = ['transitGatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listTransitGatewayRouteReports'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/route_reports',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Request a route report.
   *
   * Request route report generation.  While report generation is in progress, additional requests to generate a report
   * are ignored and return the current pending report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReport>>}
   */
  public createTransitGatewayRouteReport(
    params: TransitGatewayApisV1.CreateTransitGatewayRouteReportParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReport>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId'];
    const _validParams = ['transitGatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createTransitGatewayRouteReport'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/route_reports',
        method: 'POST',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete route report.
   *
   * Delete a route report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - Route report identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>>}
   */
  public deleteTransitGatewayRouteReport(
    params: TransitGatewayApisV1.DeleteTransitGatewayRouteReportParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteTransitGatewayRouteReport'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/route_reports/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieve route report.
   *
   * Retrieve a route report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.transitGatewayId - The Transit Gateway identifier.
   * @param {string} params.id - Route report identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReport>>}
   */
  public getTransitGatewayRouteReport(
    params: TransitGatewayApisV1.GetTransitGatewayRouteReportParams
  ): Promise<TransitGatewayApisV1.Response<TransitGatewayApisV1.RouteReport>> {
    const _params = { ...params };
    const _requiredParams = ['transitGatewayId', 'id'];
    const _validParams = ['transitGatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'transit_gateway_id': _params.transitGatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(
      TransitGatewayApisV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getTransitGatewayRouteReport'
    );

    const parameters = {
      options: {
        url: '/transit_gateways/{transit_gateway_id}/route_reports/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace TransitGatewayApisV1 {
  /** Options for the `TransitGatewayApisV1` constructor. */
  export interface Options extends UserOptions {
    /** Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date up to the current date may
     *  be provided. Specify the current date to request the latest version.
     */
    version: string;
  }

  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface EmptyObject {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listTransitGateways` operation. */
  export interface ListTransitGatewaysParams {
    /** The maximum number of resources to return per page. */
    limit?: number;
    /** A server supplied token determining which resource to start the page on. */
    start?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGateway` operation. */
  export interface CreateTransitGatewayParams {
    /** Location of Transit Gateway Services. */
    location: string;
    /** Name Transit Gateway Services. */
    name: string;
    /** Allow global routing for a Transit Gateway. If unspecified, the default value is false. */
    global?: boolean;
    /** The resource group to use. If unspecified, the account's [default resource
     *  group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
     */
    resourceGroup?: ResourceGroupIdentity;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTransitGateway` operation. */
  export interface DeleteTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGateway` operation. */
  export interface GetTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateTransitGateway` operation. */
  export interface UpdateTransitGatewayParams {
    /** The Transit Gateway identifier. */
    id: string;
    /** Allow global routing for a Transit Gateway. */
    global?: boolean;
    /** The user-defined name for this transit gateway. */
    name?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listConnections` operation. */
  export interface ListConnectionsParams {
    /** The maximum number of resources to return per page. */
    limit?: number;
    /** A server supplied token determining which resource to start the page on. */
    start?: string;
    /** Search for connections with the given network_id value. */
    networkId?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTransitGatewayConnections` operation. */
  export interface ListTransitGatewayConnectionsParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** A server supplied token determining which resource to start the page on. */
    start?: string;
    /** The maximum number of resources to return per page. */
    limit?: number;
    /** Search for connections with the given name. */
    name?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGatewayConnection` operation. */
  export interface CreateTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** Defines what type of network is connected via this connection. For access to gre_tunnel or
     *  unbound_gre_tunnel connections contact IBM support.
     */
    networkType: CreateTransitGatewayConnectionConstants.NetworkType | string;
    /** Deprecated: network_type 'gre_tunnel' connections must be created over an existing network_type 'classic'
     *  connection. This field must specify the ID of an active transit gateway network_type 'classic' connection in the
     *  same transit gateway.
     *
     *  This field is required for network type 'gre_tunnel' connections.
     *
     *  This field is required to be unspecified for network type 'classic', 'directlink', 'vpc', 'power_virtual_server'
     *  and 'unbound_gre_tunnel' connections.
     */
    baseConnectionId?: string;
    /** The type of network the Unbound GRE tunnel is targeting. This field is required for network type
     *  'unbound_gre_tunnel' connections. This field is required to be unspecified for network type 'classic',
     *  'directlink', 'vpc', 'power_virtual_server' and 'gre_tunnel' connections.
     */
    baseNetworkType?: CreateTransitGatewayConnectionConstants.BaseNetworkType | string;
    /** Local gateway IP address. This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections. This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    localGatewayIp?: string;
    /** Local tunnel IP address. The local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30 network.
     *  Neither can be the network nor broadcast addresses.
     *
     *  This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     *
     *  This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    localTunnelIp?: string;
    /** The user-defined name for this transit gateway connection. Network type 'vpc'  connections are defaulted to
     *  the name of the VPC.  Network type 'classic' connections are named 'Classic'.
     *
     *  This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     *
     *  This field is optional for network type 'classic', 'directlink', 'vpc' and 'power_virtual_server' connections.
     */
    name?: string;
    /** The ID of the account which owns the network that is being connected. Generally only used if the network is
     *  in a different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
     *  associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
     */
    networkAccountId?: string;
    /** The ID of the network being connected via this connection. For network types 'vpc','power_virtual_server'
     *  and 'directlink' this is the CRN of the VPC / PowerVS / Direct Link gateway respectively. This field is required
     *  for network type 'vpc', 'power_virtual_server' and 'directlink' connections. This field is required to be
     *  unspecified for network type 'classic', 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     */
    networkId?: string;
    /** Array of prefix route filters for a transit gateway connection. Prefix filters can be specified for netowrk
     *  type 'vpc', 'classic', 'power_virtual_server' and 'directlink' connections. They are not allowed for type
     *  'gre_tunnel' connections. This is order dependent with those first in the array being applied first, and those
     *  at the end of the array being applied last, or just before applying the default. This field is optional for
     *  network type 'classic', 'vpc', 'directlink', and 'power_virtual_server' connections. This field is required to
     *  be unspecified for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     */
    prefixFilters?: TransitGatewayConnectionPrefixFilter[];
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. This
     *  field is optional for network type 'classic', 'vpc', 'directlink', and 'power_virtual_server' connections. This
     *  field is required to be unspecified for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     */
    prefixFiltersDefault?: CreateTransitGatewayConnectionConstants.PrefixFiltersDefault | string;
    /** Remote network BGP ASN. The following ASN values are reserved and unavailable 0, 13884, 36351, 64512-64513,
     *  65100, 65200-65234, 65402-65433, 65500 and 4201065000-4201065999. If 'remote_bgp_asn' is omitted on gre_tunnel
     *  or unbound_gre_tunnel connection create requests IBM will assign an ASN.
     *
     *  This field is optional for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     *
     *  This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    remoteBgpAsn?: number;
    /** Remote gateway IP address. This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections. This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    remoteGatewayIp?: string;
    /** Remote tunnel IP address. The local_tunnel_ip and remote_tunnel_ip addresses must be in the same /30
     *  network. Neither can be the network nor broadcast addresses.
     *
     *  This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     *
     *  This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    remoteTunnelIp?: string;
    /** Specify the connection's location.  The specified availability zone must reside in the gateway's region.
     *  Use the IBM Cloud global catalog to list zones within the desired region.
     *
     *  This field is required for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections.
     *
     *  This field is required to be unspecified for network type 'classic', 'directlink', 'vpc' and
     *  'power_virtual_server' connections.
     */
    zone?: ZoneIdentity;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createTransitGatewayConnection` operation. */
  export namespace CreateTransitGatewayConnectionConstants {
    /** Defines what type of network is connected via this connection. For access to gre_tunnel or unbound_gre_tunnel connections contact IBM support. */
    export enum NetworkType {
      CLASSIC = 'classic',
      DIRECTLINK = 'directlink',
      GRE_TUNNEL = 'gre_tunnel',
      UNBOUND_GRE_TUNNEL = 'unbound_gre_tunnel',
      VPC = 'vpc',
      POWER_VIRTUAL_SERVER = 'power_virtual_server',
    }
    /** The type of network the Unbound GRE tunnel is targeting. This field is required for network type 'unbound_gre_tunnel' connections. This field is required to be unspecified for network type 'classic', 'directlink', 'vpc', 'power_virtual_server' and 'gre_tunnel' connections. */
    export enum BaseNetworkType {
      CLASSIC = 'classic',
    }
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. This field is optional for network type 'classic', 'vpc', 'directlink', and 'power_virtual_server' connections. This field is required to be unspecified for network type 'gre_tunnel' and 'unbound_gre_tunnel' connections. */
    export enum PrefixFiltersDefault {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `deleteTransitGatewayConnection` operation. */
  export interface DeleteTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGatewayConnection` operation. */
  export interface GetTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateTransitGatewayConnection` operation. */
  export interface UpdateTransitGatewayConnectionParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** The user-defined name for this transit gateway. If specified as empty string or nil,  the name will be the
     *  network name (the name of the VPC in the case of network type 'vpc',  and the word Classic, in the case of
     *  network type 'classic').
     */
    name?: string;
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. */
    prefixFiltersDefault?: UpdateTransitGatewayConnectionConstants.PrefixFiltersDefault | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateTransitGatewayConnection` operation. */
  export namespace UpdateTransitGatewayConnectionConstants {
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. */
    export enum PrefixFiltersDefault {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `createTransitGatewayConnectionActions` operation. */
  export interface CreateTransitGatewayConnectionActionsParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** The action that is to be performed against the connection request. */
    action: CreateTransitGatewayConnectionActionsConstants.Action | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createTransitGatewayConnectionActions` operation. */
  export namespace CreateTransitGatewayConnectionActionsConstants {
    /** The action that is to be performed against the connection request. */
    export enum Action {
      APPROVE = 'approve',
      REJECT = 'reject',
    }
  }

  /** Parameters for the `listGatewayLocations` operation. */
  export interface ListGatewayLocationsParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayLocation` operation. */
  export interface GetGatewayLocationParams {
    /** The Transit Gateway location Name. */
    name: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listTransitGatewayConnectionPrefixFilters` operation. */
  export interface ListTransitGatewayConnectionPrefixFiltersParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGatewayConnectionPrefixFilter` operation. */
  export interface CreateTransitGatewayConnectionPrefixFilterParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    action: CreateTransitGatewayConnectionPrefixFilterConstants.Action | string;
    /** The IPv4 Prefix to be matched by this filter. If both the 'le' and 'ge' are zero, then this filter will only
     *  apply to routes that exactly match this prefix, while a non-zero value for either 'le' or 'ge', this filter can
     *  apply to multiple routes with different prefix lengths, but will still only apply to prefixes contained in the
     *  address space defined by 'prefix'.
     */
    prefix: string;
    /** A reference to the prefix filter that will be the next filter applied to the Transit Gateway connection.
     *
     *  If this field is blank, this prefix filter will be the last rule applied before the connection's default rule.
     *
     *  When a prefix filter is created with the same before field as an existing prefix filter, the existing filter
     *  will be applied before the new filter, and the existing filter's before field will be updated accordingly.
     */
    before?: string;
    /** Defines the minimum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length greater than or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route
     *  matching behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
     *  'le' value, inclusive.
     */
    ge?: number;
    /** Defines the maximum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length less than or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route
     *  matching behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32,
     *  inclusive.
     */
    le?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createTransitGatewayConnectionPrefixFilter` operation. */
  export namespace CreateTransitGatewayConnectionPrefixFilterConstants {
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `replaceTransitGatewayConnectionPrefixFilter` operation. */
  export interface ReplaceTransitGatewayConnectionPrefixFilterParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** Array of prefix filters. */
    prefixFilters: PrefixFilterPut[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTransitGatewayConnectionPrefixFilter` operation. */
  export interface DeleteTransitGatewayConnectionPrefixFilterParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** Prefix filter identifier. */
    filterId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGatewayConnectionPrefixFilter` operation. */
  export interface GetTransitGatewayConnectionPrefixFilterParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** Prefix filter identifier. */
    filterId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateTransitGatewayConnectionPrefixFilter` operation. */
  export interface UpdateTransitGatewayConnectionPrefixFilterParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** The connection identifier. */
    id: string;
    /** Prefix filter identifier. */
    filterId: string;
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    action?: UpdateTransitGatewayConnectionPrefixFilterConstants.Action | string;
    /** A reference to the prefix filter that will be the next filter applied to the Transit Gateway connection.
     *
     *  If this field is blank, this prefix filter will be the last rule applied before the connection's default rule.
     *
     *  When a prefix filter is created with the same before field as an existing prefix filter, the existing filter
     *  will be applied before the new filter, and the existing filter's before field will be updated accordingly.
     */
    before?: string;
    /** Defines the minimum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length greater or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route
     *  matching behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
     *  'le' value, inclusive.
     */
    ge?: number;
    /** Defines the maximum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length less than or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route
     *  matching behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32,
     *  inclusive.
     */
    le?: number;
    /** The IPv4 Prefix to be matched by this filter. */
    prefix?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateTransitGatewayConnectionPrefixFilter` operation. */
  export namespace UpdateTransitGatewayConnectionPrefixFilterConstants {
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `listTransitGatewayRouteReports` operation. */
  export interface ListTransitGatewayRouteReportsParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createTransitGatewayRouteReport` operation. */
  export interface CreateTransitGatewayRouteReportParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteTransitGatewayRouteReport` operation. */
  export interface DeleteTransitGatewayRouteReportParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** Route report identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getTransitGatewayRouteReport` operation. */
  export interface GetTransitGatewayRouteReportParams {
    /** The Transit Gateway identifier. */
    transitGatewayId: string;
    /** Route report identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** A reference to the first page of resources. */
  export interface PaginationFirstConnection {
    /** url. */
    href: string;
  }

  /** A reference to the first page of resources. */
  export interface PaginationFirstTG {
    /** url. */
    href: string;
  }

  /** A reference to the first page of resources. This will be returned when number of connections in response are greater than max page limit. */
  export interface PaginationFirstTGWConnection {
    /** url. */
    href: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface PaginationNextConnection {
    /** url. */
    href: string;
    /** server generated start token for next page of resources. */
    start: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface PaginationNextTG {
    /** url. */
    href: string;
    /** server generated start token for next page of resources. */
    start: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface PaginationNextTGWConnection {
    /** url. */
    href: string;
    /** server generated start token for next page of resources. */
    start: string;
  }

  /** prefix filters. */
  export interface PrefixFilterCollection {
    /** Array of prefix filters. */
    prefix_filters: PrefixFilterCust[];
  }

  /** prefix filter. */
  export interface PrefixFilterCust {
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    action: string;
    /** A reference to the prefix filter that will be the next filter applied to the Transit Gateway connection.
     *
     *  If this field is blank, this prefix filter will be the last rule applied before the connection's default rule.
     *
     *  When a prefix filter is created with the same before field as an existing prefix filter, the existing filter
     *  will be applied before the new filter, and the existing filter's before field will be updated accordingly.
     */
    before?: string;
    /** The date and time that this prefix filter was created. */
    created_at: string;
    /** Defines the minimum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length greater or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route
     *  matching behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
     *  'le' value, inclusive.
     */
    ge?: number;
    /** Prefix Filter identifier. */
    id: string;
    /** Defines the maximum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length less than or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route
     *  matching behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32,
     *  inclusive.
     */
    le?: number;
    /** The IPv4 Prefix to be matched by this filter. If both the 'le' and 'ge' are zero, then this filter will only
     *  apply to routes that exactly match this prefix, while a non-zero value for either 'le' or 'ge', this filter can
     *  apply to multiple routes with different prefix lengths, but will still only apply to prefixes contained in the
     *  address space defined by 'prefix'.
     */
    prefix: string;
    /** The date and time that this prefix filter was last updated. */
    updated_at?: string;
  }

  /** A prefix filter update template. */
  export interface PrefixFilterPut {
    /** Whether or not this prefix filter should allow or deny prefixes matching this filter's prefix definition. */
    action: string;
    /** Defines the minimum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length greater or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'ge' route
     *  matching behavior. If the 'le' value is non-zero the the 'ge' value must between the prefix length and the
     *  'le' value, inclusive.
     */
    ge?: number;
    /** Defines the maximum matched prefix precision. If this field is non-zero then the filter will match all
     *  routes within the 'prefix' that have a prefix length less than or equal to this value.
     *
     *  This value can be zero, or a non-negative number greater than or equal to the prefix length of the filter's
     *  prefix or less then or equal to 32. If this value is set to zero, the filter will not use the 'le' route
     *  matching behavior. If the 'ge' value is non-zero the the 'le' value must between the 'ge' value and 32,
     *  inclusive.
     */
    le?: number;
    /** The IPv4 Prefix to be matched by this filter. If both the 'le' and 'ge' are zero, then this filter will only
     *  apply to routes that exactly match this prefix, while a non-zero value for either 'le' or 'ge', this filter can
     *  apply to multiple routes with different prefix lengths, but will still only apply to prefixes contained in the
     *  address space defined by 'prefix'.
     */
    prefix: string;
  }

  /** The resource group to use. If unspecified, the account's [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupIdentity {
    /** The unique identifier for this resource group. */
    id: string;
  }

  /** The resource group to use. If unspecified, the account's [default resource group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupReference {
    /** The unique identifier for this resource group. */
    id: string;
    /** The URL for this resource group. */
    href: string;
  }

  /** route report. */
  export interface RouteReport {
    /** Array of connections with their routes. */
    connections: RouteReportConnection[];
    /** Date and time route report was requested. */
    created_at: string;
    /** Report identifier. */
    id: string;
    /** Array of overlapping routes. */
    overlapping_routes: RouteReportOverlappingRouteGroup[];
    /** Route report status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field must tolerate unexpected values.
     */
    status: string;
    /** Date and time route report was last modified. */
    updated_at?: string;
  }

  /** route reports. */
  export interface RouteReportCollection {
    /** Array of route reports. */
    route_reports: RouteReport[];
  }

  /** route report connection. */
  export interface RouteReportConnection {
    /** Array of connection's bgps. */
    bgps?: RouteReportConnectionBgp[];
    /** connection ID. */
    id?: string;
    /** connection name. */
    name?: string;
    /** Array of connection's routes. */
    routes?: RouteReportConnectionRoute[];
    /** connection type. */
    type?: string;
  }

  /** connection bgp details. */
  export interface RouteReportConnectionBgp {
    /** AS path. */
    as_path?: string;
    /** Indicates whether current route is used or not. */
    is_used?: boolean;
    /** local preference. */
    local_preference?: string;
    /** prefix. */
    prefix?: string;
  }

  /** connection used route. */
  export interface RouteReportConnectionRoute {
    /** prefix. */
    prefix?: string;
  }

  /** overlapping route details. */
  export interface RouteReportOverlappingRoute {
    /** connection ID. */
    connection_id?: string;
    /** overlapping prefix. */
    prefix?: string;
  }

  /** Collection of overlapping route. */
  export interface RouteReportOverlappingRouteGroup {
    /** Array of overlapping connection/prefix pairs. */
    routes?: RouteReportOverlappingRoute[];
  }

  /** A list of Transit Gateway locations. */
  export interface TSCollection {
    /** Collection of Transit Gateway locations. */
    locations: TSLocationBasic[];
  }

  /** Details of a local connection location. */
  export interface TSLocalLocation {
    /** A descriptive display name for the location. */
    display_name: string;
    /** The name of the location. */
    name: string;
    /** Array of supported connection types. */
    supported_connection_types?: string[];
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence. The list of enumerated values for this property may expand in the future. Code and processes using
     *  this field must tolerate unexpected values.
     */
    type: string;
  }

  /** Details of a Transit Gateway location. */
  export interface TSLocation {
    /** The geographical location of this location, used for billing purposes. */
    billing_location: string;
    /** Name of the Location. */
    name: string;
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence.
     */
    type: string;
    /** The set of network locations that are considered local for this Transit Gateway location. */
    local_connection_locations: TSLocalLocation[];
  }

  /** Details of a Transit Gateway location. */
  export interface TSLocationBasic {
    /** The geographical location of this location, used for billing purposes. */
    billing_location: string;
    /** Name of the Location. */
    name: string;
    /** The type of the location, determining is this a multi-zone region, a single data center, or a point of
     *  presence.
     */
    type: string;
  }

  /** Transit gateway connection. */
  export interface TransitConnection {
    /** network_type 'gre_tunnel' connections use 'base_connection_id' to specify the id of a network_type 'classic'
     *  connection the tunnel is configured over. The specified connection must reside in the same transit gateway and
     *  be in an active state. The 'classic' connection cannot be deleted until any 'gre_tunnel' connections using it
     *  are deleted. This field only applies to and is required for network type 'gre_tunnel' connections.
     */
    base_connection_id?: string;
    /** The date and time that this connection was created. */
    created_at: string;
    /** The unique identifier for this connection. */
    id: string;
    /** Local network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    local_bgp_asn?: number;
    /** Local gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_gateway_ip?: string;
    /** Local tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    local_tunnel_ip?: string;
    /** GRE tunnel MTU.  This field only applies to network type 'gre_tunnel' connections. */
    mtu?: number;
    /** The user-defined name for this transit gateway connection. */
    name: string;
    /** The ID of the account which owns the connected network. Generally only used if the network is in a different
     *  IBM Cloud account than the gateway.
     */
    network_account_id?: string;
    /** The ID of the network being connected via this connection. This field is required for some types, such as
     *  'vpc', 'power_virtual_server' and 'directlink'. For network types 'vpc','power_virtual_server' and 'directlink'
     *  this is the CRN of the VPC / PowerVS / Direct Link gateway respectively.
     */
    network_id?: string;
    /** Defines what type of network is connected via this connection. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field must tolerate unexpected values.
     */
    network_type: string;
    /** Array of prefix route filters for a transit gateway connection. This is order dependent with those first in
     *  the array being applied first, and those at the end of the array is applied last, or just before the default.
     */
    prefix_filters?: TransitGatewayConnectionPrefixFilterReference[];
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. */
    prefix_filters_default: string;
    /** Remote network BGP ASN.  This field only applies to network type 'gre_tunnel' connections. */
    remote_bgp_asn?: number;
    /** Remote gateway IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_gateway_ip?: string;
    /** Remote tunnel IP address.  This field only applies to network type 'gre_tunnel' connections. */
    remote_tunnel_ip?: string;
    /** Only visible for cross account connections, this field represents the status of a connection request between
     *  IBM Cloud accounts. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field must tolerate unexpected values.
     */
    request_status?: string;
    /** Connection state. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field must tolerate unexpected values.
     */
    status: string;
    /** Reference to the transit gateway that contains this connection. */
    transit_gateway: TransitGatewayReference;
    /** The date and time that this connection was last updated. */
    updated_at?: string;
    /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' connections. */
    zone?: ZoneReference;
  }

  /** Transit gateway connections. */
  export interface TransitConnectionCollection {
    /** Array of transit gateway connections. */
    connections: TransitConnection[];
    /** A reference to the first page of resources. */
    first: PaginationFirstConnection;
    /** The maximum number of connections returned on one request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: PaginationNextConnection;
  }

  /** Details of a Transit Gateway. */
  export interface TransitGateway {
    /** The unique identifier for this Transit Gateway. */
    id: string;
    /** The CRN for this Transit Gateway. */
    crn: string;
    /** A human readable name for the transit gateway. */
    name: string;
    /** Location of Transit Gateway Services. */
    location: string;
    /** The date and time that this gateway was created. */
    created_at: string;
    /** Allow global routing for a Transit Gateway. */
    global: boolean;
    /** The resource group to use. If unspecified, the account's [default resource
     *  group](https://console.bluemix.net/apidocs/resource-manager#introduction) is used.
     */
    resource_group?: ResourceGroupReference;
    /** The status of the Transit Gateway. The list of enumerated values for this property may expand in the future.
     *  Code and processes using this field must tolerate unexpected values.
     */
    status: string;
    /** The date and time that this gateway was last updated. */
    updated_at?: string;
  }

  /** A list of Transit Gateways. */
  export interface TransitGatewayCollection {
    /** A reference to the first page of resources. */
    first: PaginationFirstTG;
    /** The maximum number of gateways returned on one request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: PaginationNextTG;
    /** Collection of Transit Services gateways. */
    transit_gateways: TransitGateway[];
  }

  /** A set of Transit Gateway network connections. */
  export interface TransitGatewayConnectionCollection {
    /** Array of transit gateways network Connections. */
    connections: TransitGatewayConnectionCust[];
    /** A reference to the first page of resources.
     *  This will be returned when number of connections in response are greater than max page limit.
     */
    first?: PaginationFirstTGWConnection;
    /** The maximum number of connections returned on one request. This will be returned when number of connections
     *  in response are greater than max page limit.
     */
    limit?: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: PaginationNextTGWConnection;
    /** total number of resources across all pages (considering the supplied query parameter filters). */
    total_count?: number;
  }

  /** Connection included in transit gateway. */
  export interface TransitGatewayConnectionCust {
    /** The type of network the GRE tunnel is targeting. */
    base_network_type?: string;
    /** The user-defined name for this transit gateway connection. */
    name: string;
    /** The ID of the network being connected via this connection. This field is required for some types, such as
     *  'vpc', 'power_virtual_server' and 'directlink'. For network types 'vpc','power_virtual_server' and 'directlink'
     *  this is the CRN of the VPC / PowerVS / Direct Link gateway respectively.
     */
    network_id?: string;
    /** Defines what type of network is connected via this connection. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field must tolerate unexpected values.
     */
    network_type: string;
    /** The unique identifier for this Transit Gateway Connection. */
    id: string;
    /** Deprecated: network_type 'gre_tunnel' connections use 'base_connection_id' to specify the ID of a
     *  network_type 'classic' connection the tunnel is configured over. The specified connection must reside in the
     *  same transit gateway and be in an active state. The 'classic' connection cannot be deleted until any
     *  'gre_tunnel' connections using it are deleted. This field only applies to and is required for network type
     *  'gre_tunnel' connections.
     */
    base_connection_id?: string;
    /** The date and time that this connection was created. */
    created_at: string;
    /** Local network BGP ASN.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    local_bgp_asn?: number;
    /** Local gateway IP address.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    local_gateway_ip?: string;
    /** Local tunnel IP address.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    local_tunnel_ip?: string;
    /** GRE tunnel MTU.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel' connections. */
    mtu?: number;
    /** The ID of the account which owns the connected network. Generally only used if the network is in a different
     *  IBM Cloud account than the gateway.
     */
    network_account_id?: string;
    /** Array of prefix route filters for a transit gateway connection. This is order dependent with those first in
     *  the array being applied first, and those at the end of the array is applied last, or just before the default.
     */
    prefix_filters?: TransitGatewayConnectionPrefixFilterReference[];
    /** Default setting of permit or deny which applies to any routes that don't match a specified filter. */
    prefix_filters_default: string;
    /** Remote network BGP ASN.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    remote_bgp_asn?: number;
    /** Remote gateway IP address.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    remote_gateway_ip?: string;
    /** Remote tunnel IP address.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    remote_tunnel_ip?: string;
    /** Only visible for cross account connections, this field represents the status of a connection request between
     *  IBM Cloud accounts. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field must tolerate unexpected values.
     */
    request_status?: string;
    /** Connection's current configuration state. The list of enumerated values for this property may expand in the
     *  future. Code and processes using this field must tolerate unexpected values.
     */
    status?: string;
    /** The date and time that this connection was last updated. */
    updated_at?: string;
    /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel'
     *  connections.
     */
    zone?: TransitGatewayConnectionCustZone;
  }

  /** Location of GRE tunnel.  This field only applies to network type 'gre_tunnel' and 'unbound_gre_tunnel' connections. */
  export interface TransitGatewayConnectionCustZone {
    /** Availability zone name. */
    name: string;
  }

  /** A prefix filter for a Transit Gateway connection. */
  export interface TransitGatewayConnectionPrefixFilter {
    /** Whether to permit or deny prefix filter. */
    action: string;
    /** IP Prefix GE. */
    ge?: number;
    /** IP Prefix LE. */
    le?: number;
    /** IP Prefix. */
    prefix: string;
  }

  /** A prefix filter reference object for a Transit Gateway connection. */
  export interface TransitGatewayConnectionPrefixFilterReference {
    /** Whether to permit or deny prefix filter. */
    action: string;
    /** Identifier of prefix filter that handles the ordering and follow semantics:
     *  - When a filter reference another filter in it's before field, then the filter making the reference is applied
     *  before
     *    the referenced filter. For example: if filter A references filter B in its before field, A is applied before
     *  B.
     *  - When a new filter is added that has the same before as an existing filter, then the older filter will have its
     *  before
     *    field updated to point to the new filter. Starting with the above example: if filter C is added and it
     *  references B in its
     *    before field, then A's before field should be modified to point to C, so the order of application would be A,
     *  C and finally B.
     *  - A filter that has an empty before reference will be applied last (though the date order mentioned above will
     *  still apply).
     *    So continuing the above examples, if filter B has an empty before field, then it will be applied last, but if
     *  filter D
     *    is created with an empty before field, then B's before field will be modified to point to D, so B will be
     *  applied before D.
     */
    before?: string;
    /** The date and time that this prefix filter was created. */
    created_at: string;
    /** IP Prefix GE. */
    ge?: number;
    /** Prefix Filter identifier. */
    id: string;
    /** IP Prefix LE. */
    le?: number;
    /** IP Prefix. */
    prefix: string;
    /** The date and time that this prefix filter was last updated. */
    updated_at?: string;
  }

  /** Transit gateway reference. */
  export interface TransitGatewayReference {
    /** gateway CRN. */
    crn: string;
    /** gateway ID. */
    id: string;
    /** transit gateway name. */
    name: string;
  }

  /** ZoneIdentity. */
  export interface ZoneIdentity {
  }

  /** Availability zone reference. */
  export interface ZoneReference {
    /** Availability zone name. */
    name: string;
  }

  /** Availability zone. */
  export interface ZoneIdentityByName extends ZoneIdentity {
    /** Availability zone name. */
    name?: string;
  }

  /*************************
   * pager classes
   ************************/

  /**
   * TransitGatewaysPager can be used to simplify the use of listTransitGateways().
   */
  export class TransitGatewaysPager {
    protected _hasNext: boolean;
    protected pageContext: any;

    protected client: TransitGatewayApisV1;

    protected params: TransitGatewayApisV1.ListTransitGatewaysParams;

    /**
     * Construct a TransitGatewaysPager object.
     *
     * @param {TransitGatewayApisV1}  client - The service client instance used to invoke listTransitGateways()
     * @param {Object} [params] - The parameters to be passed to listTransitGateways()
     * @constructor
     * @returns {TransitGatewaysPager}
     */
    constructor(
      client: TransitGatewayApisV1,
      params?: TransitGatewayApisV1.ListTransitGatewaysParams
    ) {
      if (params && params.start) {
        throw new Error(`the params.start field should not be set`);
      }

      this._hasNext = true;
      this.pageContext = { next: undefined };
      this.client = client;
      this.params = JSON.parse(JSON.stringify(params || {}));
    }

    /**
     * Returns true if there are potentially more results to be retrieved by invoking getNext().
     * @returns {boolean}
     */
    public hasNext(): boolean {
      return this._hasNext;
    }

    /**
     * Returns the next page of results by invoking listTransitGateways().
     * @returns {Promise<TransitGatewayApisV1.TransitGateway[]>}
     */
    public async getNext(): Promise<TransitGatewayApisV1.TransitGateway[]> {
      if (!this.hasNext()) {
        throw new Error('No more results available');
      }

      if (this.pageContext.next) {
        this.params.start = this.pageContext.next;
      }
      const response = await this.client.listTransitGateways(this.params);
      const { result } = response;

      let next = null;
      if (result && result.next) {
        next = result.next.start
      }
      this.pageContext.next = next;
      if (!this.pageContext.next) {
        this._hasNext = false;
      }
      return result.transit_gateways;
    }

    /**
     * Returns all results by invoking listTransitGateways() repeatedly until all pages of results have been retrieved.
     * @returns {Promise<TransitGatewayApisV1.TransitGateway[]>}
     */
    public async getAll(): Promise<TransitGatewayApisV1.TransitGateway[]> {
      const results: TransitGateway[] = [];
      while (this.hasNext()) {
        const nextPage = await this.getNext();
        results.push(...nextPage);
      }
      return results;
    }
  }

  /**
   * ConnectionsPager can be used to simplify the use of listConnections().
   */
  export class ConnectionsPager {
    protected _hasNext: boolean;
    protected pageContext: any;

    protected client: TransitGatewayApisV1;

    protected params: TransitGatewayApisV1.ListConnectionsParams;

    /**
     * Construct a ConnectionsPager object.
     *
     * @param {TransitGatewayApisV1}  client - The service client instance used to invoke listConnections()
     * @param {Object} [params] - The parameters to be passed to listConnections()
     * @constructor
     * @returns {ConnectionsPager}
     */
    constructor(
      client: TransitGatewayApisV1,
      params?: TransitGatewayApisV1.ListConnectionsParams
    ) {
      if (params && params.start) {
        throw new Error(`the params.start field should not be set`);
      }

      this._hasNext = true;
      this.pageContext = { next: undefined };
      this.client = client;
      this.params = JSON.parse(JSON.stringify(params || {}));
    }

    /**
     * Returns true if there are potentially more results to be retrieved by invoking getNext().
     * @returns {boolean}
     */
    public hasNext(): boolean {
      return this._hasNext;
    }

    /**
     * Returns the next page of results by invoking listConnections().
     * @returns {Promise<TransitGatewayApisV1.TransitConnection[]>}
     */
    public async getNext(): Promise<TransitGatewayApisV1.TransitConnection[]> {
      if (!this.hasNext()) {
        throw new Error('No more results available');
      }

      if (this.pageContext.next) {
        this.params.start = this.pageContext.next;
      }
      const response = await this.client.listConnections(this.params);
      const { result } = response;

      let next = null;
      if (result && result.next) {
        next = result.next.start
      }
      this.pageContext.next = next;
      if (!this.pageContext.next) {
        this._hasNext = false;
      }
      return result.connections;
    }

    /**
     * Returns all results by invoking listConnections() repeatedly until all pages of results have been retrieved.
     * @returns {Promise<TransitGatewayApisV1.TransitConnection[]>}
     */
    public async getAll(): Promise<TransitGatewayApisV1.TransitConnection[]> {
      const results: TransitConnection[] = [];
      while (this.hasNext()) {
        const nextPage = await this.getNext();
        results.push(...nextPage);
      }
      return results;
    }
  }

  /**
   * TransitGatewayConnectionsPager can be used to simplify the use of listTransitGatewayConnections().
   */
  export class TransitGatewayConnectionsPager {
    protected _hasNext: boolean;
    protected pageContext: any;

    protected client: TransitGatewayApisV1;

    protected params: TransitGatewayApisV1.ListTransitGatewayConnectionsParams;

    /**
     * Construct a TransitGatewayConnectionsPager object.
     *
     * @param {TransitGatewayApisV1}  client - The service client instance used to invoke listTransitGatewayConnections()
     * @param {Object} params - The parameters to be passed to listTransitGatewayConnections()
     * @constructor
     * @returns {TransitGatewayConnectionsPager}
     */
    constructor(
      client: TransitGatewayApisV1,
      params: TransitGatewayApisV1.ListTransitGatewayConnectionsParams
    ) {
      if (params && params.start) {
        throw new Error(`the params.start field should not be set`);
      }

      this._hasNext = true;
      this.pageContext = { next: undefined };
      this.client = client;
      this.params = JSON.parse(JSON.stringify(params || {}));
    }

    /**
     * Returns true if there are potentially more results to be retrieved by invoking getNext().
     * @returns {boolean}
     */
    public hasNext(): boolean {
      return this._hasNext;
    }

    /**
     * Returns the next page of results by invoking listTransitGatewayConnections().
     * @returns {Promise<TransitGatewayApisV1.TransitGatewayConnectionCust[]>}
     */
    public async getNext(): Promise<TransitGatewayApisV1.TransitGatewayConnectionCust[]> {
      if (!this.hasNext()) {
        throw new Error('No more results available');
      }

      if (this.pageContext.next) {
        this.params.start = this.pageContext.next;
      }
      const response = await this.client.listTransitGatewayConnections(this.params);
      const { result } = response;

      let next = null;
      if (result && result.next) {
        next = result.next.start
      }
      this.pageContext.next = next;
      if (!this.pageContext.next) {
        this._hasNext = false;
      }
      return result.connections;
    }

    /**
     * Returns all results by invoking listTransitGatewayConnections() repeatedly until all pages of results have been retrieved.
     * @returns {Promise<TransitGatewayApisV1.TransitGatewayConnectionCust[]>}
     */
    public async getAll(): Promise<TransitGatewayApisV1.TransitGatewayConnectionCust[]> {
      const results: TransitGatewayConnectionCust[] = [];
      while (this.hasNext()) {
        const nextPage = await this.getNext();
        results.push(...nextPage);
      }
      return results;
    }
  }
}

export = TransitGatewayApisV1;
