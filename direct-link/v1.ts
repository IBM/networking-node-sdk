/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.80.0-29334a73-20230925-151553
 */

/* eslint-disable max-classes-per-file */
/* eslint-disable no-await-in-loop */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  UserOptions,
  getAuthenticatorFromEnvironment,
  validateParams,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API Version: __VERSION__
 */

class DirectLinkV1 extends BaseService {
  static DEFAULT_SERVICE_URL: string = 'https://directlink.cloud.ibm.com/v1';

  static DEFAULT_SERVICE_NAME: string = 'direct_link';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of DirectLinkV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {DirectLinkV1}
   */

  public static newInstance(options: UserOptions): DirectLinkV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new DirectLinkV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /** Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to the
   *  current date may be provided. Specify the current date to request the latest version.
   */
  version: string;

  /**
   * Construct a DirectLinkV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} options.version - Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date
   * from 2019-12-13 up to the current date may be provided. Specify the current date to request the latest version.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {DirectLinkV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    const _requiredParams = ['version'];
    const _validationErrors = validateParams(options, _requiredParams, null);
    if (_validationErrors) {
      throw _validationErrors;
    }
    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(DirectLinkV1.DEFAULT_SERVICE_URL);
    }
    this.version = options.version;
  }

  /*************************
   * gateways
   ************************/

  /**
   * List gateways.
   *
   * List all Direct Link gateways in this account.  Gateways in other accounts with connections to networks in this
   * account are also returned.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayCollection>>}
   */
  public listGateways(
    params?: DirectLinkV1.ListGatewaysParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayCollection>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGateways');

    const parameters = {
      options: {
        url: '/gateways',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create gateway.
   *
   * Creates a Direct Link gateway based on the supplied template.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {GatewayTemplate} params.gatewayTemplate - The Direct Link Gateway template.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public createGateway(
    params: DirectLinkV1.CreateGatewayParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayTemplate'];
    const _validParams = ['gatewayTemplate', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = _params.gatewayTemplate;
    const query = {
      'version': this.version,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGateway');

    const parameters = {
      options: {
        url: '/gateways',
        method: 'POST',
        body,
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete gateway.
   *
   * Delete a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public deleteGateway(
    params: DirectLinkV1.DeleteGatewayParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGateway');

    const parameters = {
      options: {
        url: '/gateways/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get gateway.
   *
   * Retrieve a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GetGatewayResponse>>}
   */
  public getGateway(
    params: DirectLinkV1.GetGatewayParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GetGatewayResponse>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGateway');

    const parameters = {
      options: {
        url: '/gateways/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update gateway.
   *
   * Update a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {GatewayPatchTemplateAuthenticationKey} [params.authenticationKey] - The identity of the standard key to use
   * for BGP MD5 authentication key.
   * The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters
   * in length.
   * To clear the optional `authentication_key` field patch its crn to `""`.
   * @param {GatewayBfdPatchTemplate} [params.bfdConfig] - BFD configuration information.
   * @param {number} [params.bgpAsn] - The autonomous system number (ASN) of Border Gateway Protocol (BGP) configuration
   * for the IBM side of the DL 2.0 gateway.
   * @param {string} [params.bgpCerCidr] - BGP customer edge router CIDR is the new CIDR (Classless Inter-Domain
   * Routing) value to be updated on customer edge router for the DL 2.0 gateway.
   *
   * Customer edge IP and IBM IP should be in the same network. Updating customer edge router CIDR should be accompanied
   * with IBM CIDR in the request. Update customer edge router IP to a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the
   * value must reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public
   * CIDR.  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet mask values.
   * @param {string} [params.bgpIbmCidr] - BGP IBM CIDR is the new CIDR (Classless Inter-Domain Routing) value to be
   * updated on IBM edge router for the DL 2.0 gateway.
   *
   * IBM IP and customer edge IP should be in the same network. Updating IBM CIDR should be accompanied with customer
   * edge router CIDR in the request. Update IBM CIDR to a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must
   * reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.
   * bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet mask values.
   * @param {string} [params.connectionMode] - Type of services this Gateway is attached to. Mode transit means this
   * Gateway will be attached to Transit Gateway Service and direct means this Gateway will be attached to vpc or
   * classic connection. The list of enumerated values for this property may expand in the future. Code and processes
   * using this field  must tolerate unexpected values.
   * @param {string} [params.defaultExportRouteFilter] - The default directional route filter action that applies to
   * routes that do not match any directional route filters.
   * @param {string} [params.defaultImportRouteFilter] - The default directional route filter action that applies to
   * routes that do not match any directional route filters.
   * @param {boolean} [params.global] - Gateways with global routing (`true`) can connect to networks outside of their
   * associated region.
   * @param {string} [params.loaRejectReason] - Use this field during LOA rejection to provide the reason for the
   * rejection.
   *
   * Only allowed for type=dedicated gateways.
   * @param {GatewayMacsecConfigPatchTemplate} [params.macsecConfig] - MACsec configuration information.  When patching
   * any macsec_config fields, no other fields may be specified in the patch request.  Contact IBM support for access to
   * MACsec.
   *
   * A MACsec config cannot be added to a gateway created without MACsec.
   * @param {boolean} [params.metered] - Metered billing option.  When `true` gateway usage is billed per gigabyte.
   * When `false` there is no per gigabyte usage charge, instead a flat rate is charged for the gateway.
   * @param {string} [params.name] - The unique user-defined name for this gateway.
   * @param {string} [params.operationalStatus] - Gateway operational status.
   *
   * For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its LOA.
   * When rejecting an LOA, provide reject reasoning in `loa_reject_reason`.
   *
   * Only allowed for type=dedicated gateways.
   * @param {string} [params.patchPanelCompletionNotice] - Gateway patch panel complete notification from implementation
   * team.
   * @param {number} [params.speedMbps] - Gateway speed in megabits per second.
   * @param {number} [params.vlan] - The VLAN to configure for this gateway.
   *
   * Specify `null` to remove an existing VLAN configuration.
   *
   * The gateway must have a `type` of `dedicated`.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public updateGateway(
    params: DirectLinkV1.UpdateGatewayParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'authenticationKey', 'bfdConfig', 'bgpAsn', 'bgpCerCidr', 'bgpIbmCidr', 'connectionMode', 'defaultExportRouteFilter', 'defaultImportRouteFilter', 'global', 'loaRejectReason', 'macsecConfig', 'metered', 'name', 'operationalStatus', 'patchPanelCompletionNotice', 'speedMbps', 'vlan', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'authentication_key': _params.authenticationKey,
      'bfd_config': _params.bfdConfig,
      'bgp_asn': _params.bgpAsn,
      'bgp_cer_cidr': _params.bgpCerCidr,
      'bgp_ibm_cidr': _params.bgpIbmCidr,
      'connection_mode': _params.connectionMode,
      'default_export_route_filter': _params.defaultExportRouteFilter,
      'default_import_route_filter': _params.defaultImportRouteFilter,
      'global': _params.global,
      'loa_reject_reason': _params.loaRejectReason,
      'macsec_config': _params.macsecConfig,
      'metered': _params.metered,
      'name': _params.name,
      'operational_status': _params.operationalStatus,
      'patch_panel_completion_notice': _params.patchPanelCompletionNotice,
      'speed_mbps': _params.speedMbps,
      'vlan': _params.vlan,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGateway');

    const parameters = {
      options: {
        url: '/gateways/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/merge-patch+json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Approve or reject change requests.
   *
   * Approve or reject a gateway's current oustanding change request.
   *
   * This API is only used for provider created Direct Link Connect gateways to approve or reject specific changes
   * initiated from a provider portal.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Connect gateway identifier.
   * @param {string} [params.action] - Action request.
   * @param {AsPrependTemplate[]} [params.asPrepends] - Applicable for create_gateway_approve requests to create AS
   * Prepends. Contains an array of AS Prepend configuration information.
   * @param {GatewayActionTemplateAuthenticationKey} [params.authenticationKey] - Applicable for create_gateway_approve
   * requests to select the gateway's BGP MD5 authentication key.
   * The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters
   * in length.
   * To clear the optional `authentication_key` field patch its crn to `""`.
   * @param {GatewayBfdConfigActionTemplate} [params.bfdConfig] - Applicable for create_gateway_approve requests to
   * select the gateway's BFD configuration information.
   * @param {string} [params.connectionMode] - Applicable for create_gateway_approve requests to select the type of
   * services this gateway is attached to. Mode transit indicates this gateway will be attached to Transit Gateway
   * Service and direct means this gateway will be attached to vpc or classic connection. If unspecified on
   * create_gateway_approve, default value direct is used. The list of enumerated values for this property may expand in
   * the future. Code and processes using this field must tolerate unexpected values.
   * @param {string} [params.defaultExportRouteFilter] - The default directional route filter action that applies to
   * routes that do not match any directional route filters.
   * @param {string} [params.defaultImportRouteFilter] - The default directional route filter action that applies to
   * routes that do not match any directional route filters.
   * @param {GatewayTemplateRouteFilter[]} [params.exportRouteFilters] - Array of directional route filters for a Direct
   * Link gateway. When creating a gateway or replacing existing route filters, the order of the items in the array will
   * set the ordering of the list of route filters.
   * @param {boolean} [params.global] - Applicable for create_gateway_approve requests to select the gateway's routing
   * option. Gateways with global routing (`true`) can connect to networks outside of their associated region.
   * @param {GatewayTemplateRouteFilter[]} [params.importRouteFilters] - Array of directional route filters for a Direct
   * Link gateway. When creating a gateway or replacing existing route filters, the order of the items in the array will
   * set the ordering of the list of route filters.
   * @param {boolean} [params.metered] - Applicable for create_gateway_approve requests to select the gateway's metered
   * billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per gigabyte usage
   * charge, instead a flat rate is charged for the gateway.
   * @param {ResourceGroupIdentity} [params.resourceGroup] - Set for create_gateway_approve requests to select the
   * gateway's resource group.  If unspecified on create_gateway_approve, the account's [default resource
   * group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
   * @param {GatewayActionTemplateUpdatesItem[]} [params.updates] - Specify attribute updates being approved or
   * rejected, update_attributes_approve and update_attributes_reject actions must provide an updates field that matches
   * the gateway's current pending changes.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public createGatewayAction(
    params: DirectLinkV1.CreateGatewayActionParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'action', 'asPrepends', 'authenticationKey', 'bfdConfig', 'connectionMode', 'defaultExportRouteFilter', 'defaultImportRouteFilter', 'exportRouteFilters', 'global', 'importRouteFilters', 'metered', 'resourceGroup', 'updates', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'as_prepends': _params.asPrepends,
      'authentication_key': _params.authenticationKey,
      'bfd_config': _params.bfdConfig,
      'connection_mode': _params.connectionMode,
      'default_export_route_filter': _params.defaultExportRouteFilter,
      'default_import_route_filter': _params.defaultImportRouteFilter,
      'export_route_filters': _params.exportRouteFilters,
      'global': _params.global,
      'import_route_filters': _params.importRouteFilters,
      'metered': _params.metered,
      'resource_group': _params.resourceGroup,
      'updates': _params.updates,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayAction');

    const parameters = {
      options: {
        url: '/gateways/{id}/actions',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get completion notice.
   *
   * Retrieve a Direct Link Dedicated gateway's completion notice.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<NodeJS.ReadableStream>>}
   */
  public listGatewayCompletionNotice(
    params: DirectLinkV1.ListGatewayCompletionNoticeParams
  ): Promise<DirectLinkV1.Response<NodeJS.ReadableStream>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayCompletionNotice');

    const parameters = {
      options: {
        url: '/gateways/{id}/completion_notice',
        method: 'GET',
        qs: query,
        path,
        responseType: 'stream',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/pdf',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create completion notice.
   *
   * Upload a Direct Link Dedicated gateway completion notice.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {NodeJS.ReadableStream | Buffer} [params.upload] - Completion notice PDF file.
   * @param {string} [params.uploadContentType] - The content type of upload.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public createGatewayCompletionNotice(
    params: DirectLinkV1.CreateGatewayCompletionNoticeParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'upload', 'uploadContentType', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const formData = {
      'upload': {
        data: _params.upload,
        contentType: _params.uploadContentType,
      },
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayCompletionNotice');

    const parameters = {
      options: {
        url: '/gateways/{id}/completion_notice',
        method: 'PUT',
        qs: query,
        path,
        formData
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Content-Type': 'multipart/form-data',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get letter of authorization.
   *
   * Retrieve a Direct Link Dedicated gateway's Letter of Authorization.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<NodeJS.ReadableStream>>}
   */
  public listGatewayLetterOfAuthorization(
    params: DirectLinkV1.ListGatewayLetterOfAuthorizationParams
  ): Promise<DirectLinkV1.Response<NodeJS.ReadableStream>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayLetterOfAuthorization');

    const parameters = {
      options: {
        url: '/gateways/{id}/letter_of_authorization',
        method: 'GET',
        qs: query,
        path,
        responseType: 'stream',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/pdf',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Gateway statistics/debug information.
   *
   * Retrieve gateway statistics or debug information.  Specify statistic to retrieve using required `type` query
   * parameter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {string} params.type - Specify statistic to retrieve.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatisticCollection>>}
   */
  public getGatewayStatistics(
    params: DirectLinkV1.GetGatewayStatisticsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatisticCollection>> {
    const _params = { ...params };
    const _requiredParams = ['id', 'type'];
    const _validParams = ['id', 'type', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'type': _params.type,
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayStatistics');

    const parameters = {
      options: {
        url: '/gateways/{id}/statistics',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Gateway status information.
   *
   * Retrieve gateway status.  Specify status to retrieve using required `type` query parameter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {string} [params.type] - Specify status to retrieve.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatusCollection>>}
   */
  public getGatewayStatus(
    params: DirectLinkV1.GetGatewayStatusParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatusCollection>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'type', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
      'type': _params.type,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayStatus');

    const parameters = {
      options: {
        url: '/gateways/{id}/status',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * gatewayExportRouteFilters
   ************************/

  /**
   * List export route filters.
   *
   * List all export route filters that influence the export routes advertised to the on premises network and learned
   * from attached virtual connections of the Direct Link gateway.
   *
   * The first export route filter an export route matches will determine whether the route is permitted or denied to be
   * advertised by the Direct Link gateway. Route filter order is determined by the filter's `before` field.
   *
   * If an export route does not match any of the export route filters, the route is subject to the
   * `default_export_route_filter` of the direct link.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.ExportRouteFilterCollection>>}
   */
  public listGatewayExportRouteFilters(
    params: DirectLinkV1.ListGatewayExportRouteFiltersParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.ExportRouteFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayExportRouteFilters');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create an export route filter.
   *
   * Create a new export route filter to be configured on the Direct Link gateway.
   *
   * This call can result in an implicit update to another route filter's `before` field.
   *
   * If the request's route filter template does not contain a `before` field, the created filter will be added to the
   * end of of the list. The filter previously at the end of the list will have it's `before` field set to the created
   * route filter.
   *
   * If the request's route filter template contains a `before` field, the created filter will be added directly before
   * that specified route filter. If the specified route filter has a preceding route filter, that filter's `before`
   * field is updated to the created route filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.action - Determines whether routes that match the prefix-set will be allowed (permit) or
   * rejected (deny) through the filter.
   * @param {string} params.prefix - IP prefix representing an address and mask length of the prefix-set.
   * @param {string} [params.before] - Identifier of the next route filter considered if a route does not match the
   * current filter. This property builds the ordering among route filters and follows semantics:
   * - When before is an identifier of a route filter that exists and is in the same collection, a route will first
   * attempt to match on the current filter before preceding to the filter referenced in this property.
   * - When a filter is created with before that matches another filter in the same collection, the existing filter will
   * take precedence. The before of the existing filter will be updated to refer to the newly created filter. The newly
   * created filter will refer to the route filter identified by the provided before.
   * - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
   * precedence will be updated to refer to the newly created filter.
   * @param {number} [params.ge] - The minimum matching length of the prefix-set (mnemonic for greater than or equal
   * to).
   * @param {number} [params.le] - The maximum matching length of the prefix-set (mnemonic for less than or equal to).
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public createGatewayExportRouteFilter(
    params: DirectLinkV1.CreateGatewayExportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'action', 'prefix'];
    const _validParams = ['gatewayId', 'action', 'prefix', 'before', 'ge', 'le', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'prefix': _params.prefix,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayExportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Replace existing export route filters.
   *
   * Replace all existing export route filters configured on the Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.ifMatch - If present, the request will fail if the specified ETag value does not match the
   * resource's current ETag value.
   * @param {GatewayTemplateRouteFilter[]} [params.exportRouteFilters] - Array of directional route filters for a Direct
   * Link gateway. When creating a gateway or replacing existing route filters, the order of the items in the array will
   * set the ordering of the list of route filters.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.ExportRouteFilterCollection>>}
   */
  public replaceGatewayExportRouteFilters(
    params: DirectLinkV1.ReplaceGatewayExportRouteFiltersParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.ExportRouteFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'ifMatch'];
    const _validParams = ['gatewayId', 'ifMatch', 'exportRouteFilters', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'export_route_filters': _params.exportRouteFilters,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceGatewayExportRouteFilters');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters',
        method: 'PUT',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'If-Match': _params.ifMatch,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Remove export route filter from Direct Link gateway.
   *
   * Delete an export route filter.
   *
   * Deleting an export route filter will implicitly update the preceding filter's `before` field to the filter that
   * follows the deleted filter. The preceding filter will result with an empty `before` field if there is no filter
   * following the deleted route filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public deleteGatewayExportRouteFilter(
    params: DirectLinkV1.DeleteGatewayExportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGatewayExportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves the specified Direct Link gateway export route filter.
   *
   * Retrieve an export route filter from the Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public getGatewayExportRouteFilter(
    params: DirectLinkV1.GetGatewayExportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayExportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Updates the specified Direct Link gateway export route filter.
   *
   * Update an export route filter from the Direct Link gateway.
   *
   * Updating a route filter's `before` field will result in implicit updates to other route filters' `before` fields.
   *
   * Considering the updated filter prior to the update, the preceding route filter's `before` field will be set to the
   * filter following the updating route filter, if present. Otherwise it is set to empty.
   *
   * Considering the updated filter after the update, if the new filter following the updated filter has an existing
   * filter preceding it, that preceding filter's `before` field will be set to the updated filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {string} [params.action] - Determines whether routes that match the prefix-set will be allowed (permit) or
   * rejected (deny) through the filter.
   * @param {string} [params.before] - Identifier of the next route filter considered if a route does not match the
   * current filter. This property builds the ordering among route filters and follows semantics:
   * - When before is an identifier of a route filter that exists and is in the same collection, a route will first
   * attempt to match on the current filter before preceding to the filter referenced in this property.
   * - When a filter is created with before that matches another filter in the same collection, the existing filter will
   * take precedence. The before of the existing filter will be updated to refer to the newly created filter. The newly
   * created filter will refer to the route filter identified by the provided before.
   * - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
   * precedence will be updated to refer to the newly created filter.
   * @param {number} [params.ge] - The minimum matching length of the prefix-set (mnemonic for greater than or equal
   * to).
   *
   * To clear the minimum matching length of the filter, patch the value to `0`.
   * @param {number} [params.le] - The maximum matching length of the prefix-set (mnemonic for less than or equal to).
   *
   * To clear the maximum matching length of the filter, patch the value to `0`.
   * @param {string} [params.prefix] - IP prefix representing an address and mask length of the prefix-set.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public updateGatewayExportRouteFilter(
    params: DirectLinkV1.UpdateGatewayExportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'action', 'before', 'ge', 'le', 'prefix', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
      'prefix': _params.prefix,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGatewayExportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/export_route_filters/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/merge-patch+json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * gatewayImportRouteFilters
   ************************/

  /**
   * List import route filters.
   *
   * List all import route filters that influence the import routes learned from the on premises network.
   *
   * The first import route filter an import route matches will determine whether the route is permitted or denied to be
   * learned by the Direct Link gateway. Route filter order is determined by the filter's `before` field.
   *
   * If an import route does not match any of the import route filters, the route is subject to the
   * `default_import_route_filter` of the direct link.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.ImportRouteFilterCollection>>}
   */
  public listGatewayImportRouteFilters(
    params: DirectLinkV1.ListGatewayImportRouteFiltersParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.ImportRouteFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayImportRouteFilters');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create an import route filter.
   *
   * Create a new import route filter to be configured on the Direct Link gateway.
   *
   * This call can result in an implicit update to another route filter's `before` field.
   *
   * If the request's route filter template does not contain a `before` field, the created filter will be added to the
   * end of of the list. The filter previously at the end of the list will have it's `before` field set to the created
   * route filter.
   *
   * If the request's route filter template contains a `before` field, the created filter will be added directly before
   * that specified route filter. If the specified route filter has a preceding route filter, that filter's `before`
   * field is updated to the created route filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.action - Determines whether routes that match the prefix-set will be allowed (permit) or
   * rejected (deny) through the filter.
   * @param {string} params.prefix - IP prefix representing an address and mask length of the prefix-set.
   * @param {string} [params.before] - Identifier of the next route filter considered if a route does not match the
   * current filter. This property builds the ordering among route filters and follows semantics:
   * - When before is an identifier of a route filter that exists and is in the same collection, a route will first
   * attempt to match on the current filter before preceding to the filter referenced in this property.
   * - When a filter is created with before that matches another filter in the same collection, the existing filter will
   * take precedence. The before of the existing filter will be updated to refer to the newly created filter. The newly
   * created filter will refer to the route filter identified by the provided before.
   * - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
   * precedence will be updated to refer to the newly created filter.
   * @param {number} [params.ge] - The minimum matching length of the prefix-set (mnemonic for greater than or equal
   * to).
   * @param {number} [params.le] - The maximum matching length of the prefix-set (mnemonic for less than or equal to).
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public createGatewayImportRouteFilter(
    params: DirectLinkV1.CreateGatewayImportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'action', 'prefix'];
    const _validParams = ['gatewayId', 'action', 'prefix', 'before', 'ge', 'le', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'prefix': _params.prefix,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayImportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Replace existing import route filters.
   *
   * Replace all existing import route filters configured on the Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.ifMatch - If present, the request will fail if the specified ETag value does not match the
   * resource's current ETag value.
   * @param {GatewayTemplateRouteFilter[]} [params.importRouteFilters] - Array of directional route filters for a Direct
   * Link gateway. When creating a gateway or replacing existing route filters, the order of the items in the array will
   * set the ordering of the list of route filters.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.ImportRouteFilterCollection>>}
   */
  public replaceGatewayImportRouteFilters(
    params: DirectLinkV1.ReplaceGatewayImportRouteFiltersParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.ImportRouteFilterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'ifMatch'];
    const _validParams = ['gatewayId', 'ifMatch', 'importRouteFilters', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'import_route_filters': _params.importRouteFilters,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceGatewayImportRouteFilters');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters',
        method: 'PUT',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'If-Match': _params.ifMatch,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Remove import route filter from Direct Link gateway.
   *
   * Delete an import route filter.
   *
   * Deleting an import route filter will implicitly update the preceding filter's `before` field to the filter that
   * follows the deleted filter. The preceding filter will result with an empty `before` field if there is no filter
   * following the deleted route filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public deleteGatewayImportRouteFilter(
    params: DirectLinkV1.DeleteGatewayImportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGatewayImportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieves the specified Direct Link gateway import route filter.
   *
   * Retrieve an import route filter from the Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public getGatewayImportRouteFilter(
    params: DirectLinkV1.GetGatewayImportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayImportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Updates the specified Direct Link gateway import route filter.
   *
   * Update an import route filter from the Direct Link gateway.
   *
   * Updating a route filter's `before` field will result in implicit updates to other route filters' `before` fields.
   *
   * Considering the updated filter prior to the update, the preceding route filter's `before` field will be set to the
   * filter following the updating route filter, if present. Otherwise it is set to empty.
   *
   * Considering the updated filter after the update, if the new filter following the updated filter has an existing
   * filter preceding it, that preceding filter's `before` field will be set to the updated filter.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Identifier of an import route filter.
   * @param {string} [params.action] - Determines whether routes that match the prefix-set will be allowed (permit) or
   * rejected (deny) through the filter.
   * @param {string} [params.before] - Identifier of the next route filter considered if a route does not match the
   * current filter. This property builds the ordering among route filters and follows semantics:
   * - When before is an identifier of a route filter that exists and is in the same collection, a route will first
   * attempt to match on the current filter before preceding to the filter referenced in this property.
   * - When a filter is created with before that matches another filter in the same collection, the existing filter will
   * take precedence. The before of the existing filter will be updated to refer to the newly created filter. The newly
   * created filter will refer to the route filter identified by the provided before.
   * - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
   * precedence will be updated to refer to the newly created filter.
   * @param {number} [params.ge] - The minimum matching length of the prefix-set (mnemonic for greater than or equal
   * to).
   *
   * To clear the minimum matching length of the filter, patch the value to `0`.
   * @param {number} [params.le] - The maximum matching length of the prefix-set (mnemonic for less than or equal to).
   *
   * To clear the maximum matching length of the filter, patch the value to `0`.
   * @param {string} [params.prefix] - IP prefix representing an address and mask length of the prefix-set.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>>}
   */
  public updateGatewayImportRouteFilter(
    params: DirectLinkV1.UpdateGatewayImportRouteFilterParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteFilter>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'action', 'before', 'ge', 'le', 'prefix', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'action': _params.action,
      'before': _params.before,
      'ge': _params.ge,
      'le': _params.le,
      'prefix': _params.prefix,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGatewayImportRouteFilter');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/import_route_filters/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/merge-patch+json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * gatewayRouteReports
   ************************/

  /**
   * List route reports.
   *
   * Retrieve all route reports for the specified Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteReportCollection>>}
   */
  public listGatewayRouteReports(
    params: DirectLinkV1.ListGatewayRouteReportsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteReportCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayRouteReports');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/route_reports',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Request a route report.
   *
   * Request route report generation.  While report generation is in progress, additional requests to generate a report
   * are ignored and return the current pending report. While `status` is `pending`, `gateway_routes`, `on_prem_routes`,
   * `virtual_connection_routes`, and `overlapping_routes` will be empty arrays. These fields will be filled when the
   * `status` enters the `complete` status.  Call `get_gateway_route_report` with the pending route report's `id` to
   * check on the current status of the report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteReport>>}
   */
  public createGatewayRouteReport(
    params: DirectLinkV1.CreateGatewayRouteReportParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteReport>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayRouteReport');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/route_reports',
        method: 'POST',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete route report.
   *
   * Delete a route report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Route report identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public deleteGatewayRouteReport(
    params: DirectLinkV1.DeleteGatewayRouteReportParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGatewayRouteReport');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/route_reports/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Retrieve route report.
   *
   * Retrieve a route report.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - Route report identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.RouteReport>>}
   */
  public getGatewayRouteReport(
    params: DirectLinkV1.GetGatewayRouteReportParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.RouteReport>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayRouteReport');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/route_reports/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * virtualConnections
   ************************/

  /**
   * List virtual connections.
   *
   * List a gateway's virtual connections.   For gateway in other account with virtual connections that connect to
   * network in this account.  Only virtual connections that connect to this account are returned.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnectionCollection>>}
   */
  public listGatewayVirtualConnections(
    params: DirectLinkV1.ListGatewayVirtualConnectionsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnectionCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayVirtualConnections');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/virtual_connections',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create virtual connection.
   *
   * Create a virtual connection to the specified network.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.name - The user-defined name for this virtual connection.  Virtual connection names are
   * unique within a gateway.  This is the name of the virtual connection itself, the network being connected may have
   * its own name attribute.
   * @param {string} params.type - The type of virtual connection.
   * @param {string} [params.networkId] - Unique identifier of the target network.  For type=vpc virtual connections
   * this is the CRN of the target VPC.  This field does not apply to type=classic connections.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public createGatewayVirtualConnection(
    params: DirectLinkV1.CreateGatewayVirtualConnectionParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'name', 'type'];
    const _validParams = ['gatewayId', 'name', 'type', 'networkId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'type': _params.type,
      'network_id': _params.networkId,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayVirtualConnection');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/virtual_connections',
        method: 'POST',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete virtual connection.
   *
   * Delete the virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>>}
   */
  public deleteGatewayVirtualConnection(
    params: DirectLinkV1.DeleteGatewayVirtualConnectionParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGatewayVirtualConnection');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/virtual_connections/{id}',
        method: 'DELETE',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get virtual connection.
   *
   * Retrieve a virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public getGatewayVirtualConnection(
    params: DirectLinkV1.GetGatewayVirtualConnectionParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayVirtualConnection');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/virtual_connections/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update virtual connection.
   *
   * Update a virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {string} [params.name] - The user-defined name for this virtual connection.  Virtual connection names are
   * unique within a gateway.  This is the name of the virtual connection itself, the network being connected may have
   * its own name attribute.
   * @param {string} [params.status] - Status of the virtual connection.  Virtual connections that span IBM Cloud
   * Accounts are created in approval_pending status.  The owner of the target network can accept or reject connection
   * requests by patching status to attached or rejected respectively.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public updateGatewayVirtualConnection(
    params: DirectLinkV1.UpdateGatewayVirtualConnectionParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'id'];
    const _validParams = ['gatewayId', 'id', 'name', 'status', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'name': _params.name,
      'status': _params.status,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGatewayVirtualConnection');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/virtual_connections/{id}',
        method: 'PATCH',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * offeringInformation
   ************************/

  /**
   * List available locations.
   *
   * Retrieve the list of valid locations for the specified Direct Link offering.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Current supported values are `"dedicated"`
   * and `"connect"`.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.LocationCollection>>}
   */
  public listOfferingTypeLocations(
    params: DirectLinkV1.ListOfferingTypeLocationsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.LocationCollection>> {
    const _params = { ...params };
    const _requiredParams = ['offeringType'];
    const _validParams = ['offeringType', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'offering_type': _params.offeringType,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeLocations');

    const parameters = {
      options: {
        url: '/offering_types/{offering_type}/locations',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List routers.
   *
   * Retrieve location specific cross connect router information.  Only valid for offering_type=dedicated locations.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Current supported values are `"dedicated"`
   * and `"connect"`.
   * @param {string} params.locationName - The name of the Direct Link location.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.LocationCrossConnectRouterCollection>>}
   */
  public listOfferingTypeLocationCrossConnectRouters(
    params: DirectLinkV1.ListOfferingTypeLocationCrossConnectRoutersParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.LocationCrossConnectRouterCollection>> {
    const _params = { ...params };
    const _requiredParams = ['offeringType', 'locationName'];
    const _validParams = ['offeringType', 'locationName', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'offering_type': _params.offeringType,
      'location_name': _params.locationName,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeLocationCrossConnectRouters');

    const parameters = {
      options: {
        url: '/offering_types/{offering_type}/locations/{location_name}/cross_connect_routers',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List speed options.
   *
   * List the available Direct Link speeds.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Current supported values are `"dedicated"`
   * and `"connect"`.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.OfferingSpeedCollection>>}
   */
  public listOfferingTypeSpeeds(
    params: DirectLinkV1.ListOfferingTypeSpeedsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.OfferingSpeedCollection>> {
    const _params = { ...params };
    const _requiredParams = ['offeringType'];
    const _validParams = ['offeringType', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'offering_type': _params.offeringType,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeSpeeds');

    const parameters = {
      options: {
        url: '/offering_types/{offering_type}/speeds',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * ports
   ************************/

  /**
   * List ports.
   *
   * Retrieve list of available Direct Link connect ports.  These ports can be used to create Direct Link connect
   * gateways.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {string} [params.start] - A server-supplied token determining which resource to start the page on.
   * @param {number} [params.limit] - The number of resources to return on a page.
   * @param {string} [params.locationName] - Direct Link location short name.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.PortCollection>>}
   */
  public listPorts(
    params?: DirectLinkV1.ListPortsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.PortCollection>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['start', 'limit', 'locationName', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
      'start': _params.start,
      'limit': _params.limit,
      'location_name': _params.locationName,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listPorts');

    const parameters = {
      options: {
        url: '/ports',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get port.
   *
   * Retrieve Direct Link Connect provider port.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The port identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Port>>}
   */
  public getPort(
    params: DirectLinkV1.GetPortParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.Port>> {
    const _params = { ...params };
    const _requiredParams = ['id'];
    const _validParams = ['id', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'id': _params.id,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getPort');

    const parameters = {
      options: {
        url: '/ports/{id}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * gatewayASPrepends
   ************************/

  /**
   * List AS Prepends.
   *
   * Retrieve all AS Prepends for the specified Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.AsPrependCollection>>}
   */
  public listGatewayAsPrepends(
    params: DirectLinkV1.ListGatewayAsPrependsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.AsPrependCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId'];
    const _validParams = ['gatewayId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayAsPrepends');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/as_prepends',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Replace existing AS Prepends.
   *
   * Replace the given set of AS prepends on the specified gateway.  Existing resources may be reused when the
   * individual AS Prepend item is unchanged.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.ifMatch - If present, the request will fail if the specified ETag value does not match the
   * resource's current ETag value.
   * @param {AsPrependPrefixArrayTemplate[]} [params.asPrepends] - array of AS Prepend configuration information.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.AsPrependCollection>>}
   */
  public replaceGatewayAsPrepends(
    params: DirectLinkV1.ReplaceGatewayAsPrependsParams
  ): Promise<DirectLinkV1.Response<DirectLinkV1.AsPrependCollection>> {
    const _params = { ...params };
    const _requiredParams = ['gatewayId', 'ifMatch'];
    const _validParams = ['gatewayId', 'ifMatch', 'asPrepends', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'as_prepends': _params.asPrepends,
    };

    const query = {
      'version': this.version,
    };

    const path = {
      'gateway_id': _params.gatewayId,
    };

    const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceGatewayAsPrepends');

    const parameters = {
      options: {
        url: '/gateways/{gateway_id}/as_prepends',
        method: 'PUT',
        body,
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'If-Match': _params.ifMatch,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace DirectLinkV1 {
  /** Options for the `DirectLinkV1` constructor. */
  export interface Options extends UserOptions {
    /** Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to the
     *  current date may be provided. Specify the current date to request the latest version.
     */
    version: string;
  }

  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface EmptyObject {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listGateways` operation. */
  export interface ListGatewaysParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGateway` operation. */
  export interface CreateGatewayParams {
    /** The Direct Link Gateway template. */
    gatewayTemplate: GatewayTemplate;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteGateway` operation. */
  export interface DeleteGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGateway` operation. */
  export interface GetGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGateway` operation. */
  export interface UpdateGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    /** The identity of the standard key to use for BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authenticationKey?: GatewayPatchTemplateAuthenticationKey;
    /** BFD configuration information. */
    bfdConfig?: GatewayBfdPatchTemplate;
    /** The autonomous system number (ASN) of Border Gateway Protocol (BGP) configuration for the IBM side of the DL
     *  2.0 gateway.
     */
    bgpAsn?: number;
    /** BGP customer edge router CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on
     *  customer edge router for the DL 2.0 gateway.
     *
     *  Customer edge IP and IBM IP should be in the same network. Updating customer edge router CIDR should be
     *  accompanied with IBM CIDR in the request. Update customer edge router IP to a valid bgp_cer_cidr and
     *  bgp_ibm_cidr CIDR, the value must reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16",
     *  "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet
     *  mask values.
     */
    bgpCerCidr?: string;
    /** BGP IBM CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on IBM edge router for the
     *  DL 2.0 gateway.
     *
     *  IBM IP and customer edge IP should be in the same network. Updating IBM CIDR should be accompanied with customer
     *  edge router CIDR in the request. Update IBM CIDR to a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must
     *  reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.
     *  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgpIbmCidr?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connectionMode?: UpdateGatewayConstants.ConnectionMode | string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    defaultExportRouteFilter?: UpdateGatewayConstants.DefaultExportRouteFilter | string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    defaultImportRouteFilter?: UpdateGatewayConstants.DefaultImportRouteFilter | string;
    /** Gateways with global routing (`true`) can connect to networks outside of their associated region. */
    global?: boolean;
    /** Use this field during LOA rejection to provide the reason for the rejection.
     *
     *  Only allowed for type=dedicated gateways.
     */
    loaRejectReason?: string;
    /** MACsec configuration information.  When patching any macsec_config fields, no other fields may be specified
     *  in the patch request.  Contact IBM support for access to MACsec.
     *
     *  A MACsec config cannot be added to a gateway created without MACsec.
     */
    macsecConfig?: GatewayMacsecConfigPatchTemplate;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered?: boolean;
    /** The unique user-defined name for this gateway. */
    name?: string;
    /** Gateway operational status.
     *
     *  For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its
     *  LOA.  When rejecting an LOA, provide reject reasoning in `loa_reject_reason`.
     *
     *  Only allowed for type=dedicated gateways.
     */
    operationalStatus?: UpdateGatewayConstants.OperationalStatus | string;
    /** Gateway patch panel complete notification from implementation team. */
    patchPanelCompletionNotice?: string;
    /** Gateway speed in megabits per second. */
    speedMbps?: number;
    /** The VLAN to configure for this gateway.
     *
     *  Specify `null` to remove an existing VLAN configuration.
     *
     *  The gateway must have a `type` of `dedicated`.
     */
    vlan?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGateway` operation. */
  export namespace UpdateGatewayConstants {
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of enumerated values for this property may expand in the future. Code and processes using this field  must tolerate unexpected values. */
    export enum ConnectionMode {
      DIRECT = 'direct',
      TRANSIT = 'transit',
    }
    /** The default directional route filter action that applies to routes that do not match any directional route filters. */
    export enum DefaultExportRouteFilter {
      PERMIT = 'permit',
      DENY = 'deny',
    }
    /** The default directional route filter action that applies to routes that do not match any directional route filters. */
    export enum DefaultImportRouteFilter {
      PERMIT = 'permit',
      DENY = 'deny',
    }
    /** Gateway operational status. For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its LOA.  When rejecting an LOA, provide reject reasoning in `loa_reject_reason`. Only allowed for type=dedicated gateways. */
    export enum OperationalStatus {
      LOA_ACCEPTED = 'loa_accepted',
      LOA_REJECTED = 'loa_rejected',
    }
  }

  /** Parameters for the `createGatewayAction` operation. */
  export interface CreateGatewayActionParams {
    /** Direct Link Connect gateway identifier. */
    id: string;
    /** Action request. */
    action?: CreateGatewayActionConstants.Action | string;
    /** Applicable for create_gateway_approve requests to create AS Prepends. Contains an array of AS Prepend
     *  configuration information.
     */
    asPrepends?: AsPrependTemplate[];
    /** Applicable for create_gateway_approve requests to select the gateway's BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authenticationKey?: GatewayActionTemplateAuthenticationKey;
    /** Applicable for create_gateway_approve requests to select the gateway's BFD configuration information. */
    bfdConfig?: GatewayBfdConfigActionTemplate;
    /** Applicable for create_gateway_approve requests to select the type of services this gateway is attached to.
     *  Mode transit indicates this gateway will be attached to Transit Gateway Service and direct means this gateway
     *  will be attached to vpc or classic connection. If unspecified on create_gateway_approve, default value direct is
     *  used. The list of enumerated values for this property may expand in the future. Code and processes using this
     *  field must tolerate unexpected values.
     */
    connectionMode?: CreateGatewayActionConstants.ConnectionMode | string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    defaultExportRouteFilter?: CreateGatewayActionConstants.DefaultExportRouteFilter | string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    defaultImportRouteFilter?: CreateGatewayActionConstants.DefaultImportRouteFilter | string;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    exportRouteFilters?: GatewayTemplateRouteFilter[];
    /** Applicable for create_gateway_approve requests to select the gateway's routing option. Gateways with global
     *  routing (`true`) can connect to networks outside of their associated region.
     */
    global?: boolean;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    importRouteFilters?: GatewayTemplateRouteFilter[];
    /** Applicable for create_gateway_approve requests to select the gateway's metered billing option.  When `true`
     *  gateway usage is billed per gigabyte.  When `false` there is no per gigabyte usage charge, instead a flat rate
     *  is charged for the gateway.
     */
    metered?: boolean;
    /** Set for create_gateway_approve requests to select the gateway's resource group.  If unspecified on
     *  create_gateway_approve, the account's [default resource
     *  group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
     */
    resourceGroup?: ResourceGroupIdentity;
    /** Specify attribute updates being approved or rejected, update_attributes_approve and update_attributes_reject
     *  actions must provide an updates field that matches the gateway's current pending changes.
     */
    updates?: GatewayActionTemplateUpdatesItem[];
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayAction` operation. */
  export namespace CreateGatewayActionConstants {
    /** Action request. */
    export enum Action {
      CREATE_GATEWAY_APPROVE = 'create_gateway_approve',
      CREATE_GATEWAY_REJECT = 'create_gateway_reject',
      DELETE_GATEWAY_APPROVE = 'delete_gateway_approve',
      DELETE_GATEWAY_REJECT = 'delete_gateway_reject',
      UPDATE_ATTRIBUTES_APPROVE = 'update_attributes_approve',
      UPDATE_ATTRIBUTES_REJECT = 'update_attributes_reject',
    }
    /** Applicable for create_gateway_approve requests to select the type of services this gateway is attached to. Mode transit indicates this gateway will be attached to Transit Gateway Service and direct means this gateway will be attached to vpc or classic connection. If unspecified on create_gateway_approve, default value direct is used. The list of enumerated values for this property may expand in the future. Code and processes using this field must tolerate unexpected values. */
    export enum ConnectionMode {
      DIRECT = 'direct',
      TRANSIT = 'transit',
    }
    /** The default directional route filter action that applies to routes that do not match any directional route filters. */
    export enum DefaultExportRouteFilter {
      PERMIT = 'permit',
      DENY = 'deny',
    }
    /** The default directional route filter action that applies to routes that do not match any directional route filters. */
    export enum DefaultImportRouteFilter {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `listGatewayCompletionNotice` operation. */
  export interface ListGatewayCompletionNoticeParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayCompletionNotice` operation. */
  export interface CreateGatewayCompletionNoticeParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    /** Completion notice PDF file. */
    upload?: NodeJS.ReadableStream | Buffer;
    /** The content type of upload. */
    uploadContentType?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listGatewayLetterOfAuthorization` operation. */
  export interface ListGatewayLetterOfAuthorizationParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayStatistics` operation. */
  export interface GetGatewayStatisticsParams {
    /** Direct Link gateway identifier. */
    id: string;
    /** Specify statistic to retrieve. */
    type: GetGatewayStatisticsConstants.Type | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `getGatewayStatistics` operation. */
  export namespace GetGatewayStatisticsConstants {
    /** Specify statistic to retrieve. */
    export enum Type {
      MACSEC_MKA_SESSION = 'macsec_mka_session',
      MACSEC_POLICY = 'macsec_policy',
      MACSEC_MKA_STATISTICS = 'macsec_mka_statistics',
      BFD_SESSION = 'bfd_session',
    }
  }

  /** Parameters for the `getGatewayStatus` operation. */
  export interface GetGatewayStatusParams {
    /** Direct Link gateway identifier. */
    id: string;
    /** Specify status to retrieve. */
    type?: GetGatewayStatusConstants.Type | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `getGatewayStatus` operation. */
  export namespace GetGatewayStatusConstants {
    /** Specify status to retrieve. */
    export enum Type {
      BGP = 'bgp',
      BFD = 'bfd',
      LINK = 'link',
    }
  }

  /** Parameters for the `listGatewayExportRouteFilters` operation. */
  export interface ListGatewayExportRouteFiltersParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayExportRouteFilter` operation. */
  export interface CreateGatewayExportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action: CreateGatewayExportRouteFilterConstants.Action | string;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix: string;
    /** Identifier of the next route filter considered if a route does not match the current filter. This property
     *  builds the ordering among route filters and follows semantics:
     *  - When before is an identifier of a route filter that exists and is in the same collection, a route will first
     *  attempt to match on the current filter before preceding to the filter referenced in this property.
     *  - When a filter is created with before that matches another filter in the same collection, the existing filter
     *  will take precedence. The before of the existing filter will be updated to refer to the newly created filter.
     *  The newly created filter will refer to the route filter identified by the provided before.
     *  - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
     *  precedence will be updated to refer to the newly created filter.
     */
    before?: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to). */
    ge?: number;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to). */
    le?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayExportRouteFilter` operation. */
  export namespace CreateGatewayExportRouteFilterConstants {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the filter. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `replaceGatewayExportRouteFilters` operation. */
  export interface ReplaceGatewayExportRouteFiltersParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** If present, the request will fail if the specified ETag value does not match the resource's current ETag
     *  value.
     */
    ifMatch: string;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    exportRouteFilters?: GatewayTemplateRouteFilter[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteGatewayExportRouteFilter` operation. */
  export interface DeleteGatewayExportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayExportRouteFilter` operation. */
  export interface GetGatewayExportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGatewayExportRouteFilter` operation. */
  export interface UpdateGatewayExportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action?: UpdateGatewayExportRouteFilterConstants.Action | string;
    /** Identifier of the next route filter considered if a route does not match the current filter. This property
     *  builds the ordering among route filters and follows semantics:
     *  - When before is an identifier of a route filter that exists and is in the same collection, a route will first
     *  attempt to match on the current filter before preceding to the filter referenced in this property.
     *  - When a filter is created with before that matches another filter in the same collection, the existing filter
     *  will take precedence. The before of the existing filter will be updated to refer to the newly created filter.
     *  The newly created filter will refer to the route filter identified by the provided before.
     *  - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
     *  precedence will be updated to refer to the newly created filter.
     */
    before?: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to).
     *
     *  To clear the minimum matching length of the filter, patch the value to `0`.
     */
    ge?: number;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to).
     *
     *  To clear the maximum matching length of the filter, patch the value to `0`.
     */
    le?: number;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGatewayExportRouteFilter` operation. */
  export namespace UpdateGatewayExportRouteFilterConstants {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the filter. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `listGatewayImportRouteFilters` operation. */
  export interface ListGatewayImportRouteFiltersParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayImportRouteFilter` operation. */
  export interface CreateGatewayImportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action: CreateGatewayImportRouteFilterConstants.Action | string;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix: string;
    /** Identifier of the next route filter considered if a route does not match the current filter. This property
     *  builds the ordering among route filters and follows semantics:
     *  - When before is an identifier of a route filter that exists and is in the same collection, a route will first
     *  attempt to match on the current filter before preceding to the filter referenced in this property.
     *  - When a filter is created with before that matches another filter in the same collection, the existing filter
     *  will take precedence. The before of the existing filter will be updated to refer to the newly created filter.
     *  The newly created filter will refer to the route filter identified by the provided before.
     *  - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
     *  precedence will be updated to refer to the newly created filter.
     */
    before?: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to). */
    ge?: number;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to). */
    le?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayImportRouteFilter` operation. */
  export namespace CreateGatewayImportRouteFilterConstants {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the filter. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `replaceGatewayImportRouteFilters` operation. */
  export interface ReplaceGatewayImportRouteFiltersParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** If present, the request will fail if the specified ETag value does not match the resource's current ETag
     *  value.
     */
    ifMatch: string;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    importRouteFilters?: GatewayTemplateRouteFilter[];
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteGatewayImportRouteFilter` operation. */
  export interface DeleteGatewayImportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayImportRouteFilter` operation. */
  export interface GetGatewayImportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGatewayImportRouteFilter` operation. */
  export interface UpdateGatewayImportRouteFilterParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Identifier of an import route filter. */
    id: string;
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action?: UpdateGatewayImportRouteFilterConstants.Action | string;
    /** Identifier of the next route filter considered if a route does not match the current filter. This property
     *  builds the ordering among route filters and follows semantics:
     *  - When before is an identifier of a route filter that exists and is in the same collection, a route will first
     *  attempt to match on the current filter before preceding to the filter referenced in this property.
     *  - When a filter is created with before that matches another filter in the same collection, the existing filter
     *  will take precedence. The before of the existing filter will be updated to refer to the newly created filter.
     *  The newly created filter will refer to the route filter identified by the provided before.
     *  - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
     *  precedence will be updated to refer to the newly created filter.
     */
    before?: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to).
     *
     *  To clear the minimum matching length of the filter, patch the value to `0`.
     */
    ge?: number;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to).
     *
     *  To clear the maximum matching length of the filter, patch the value to `0`.
     */
    le?: number;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGatewayImportRouteFilter` operation. */
  export namespace UpdateGatewayImportRouteFilterConstants {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the filter. */
    export enum Action {
      PERMIT = 'permit',
      DENY = 'deny',
    }
  }

  /** Parameters for the `listGatewayRouteReports` operation. */
  export interface ListGatewayRouteReportsParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayRouteReport` operation. */
  export interface CreateGatewayRouteReportParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteGatewayRouteReport` operation. */
  export interface DeleteGatewayRouteReportParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Route report identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayRouteReport` operation. */
  export interface GetGatewayRouteReportParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** Route report identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listGatewayVirtualConnections` operation. */
  export interface ListGatewayVirtualConnectionsParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayVirtualConnection` operation. */
  export interface CreateGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name: string;
    /** The type of virtual connection. */
    type: CreateGatewayVirtualConnectionConstants.Type | string;
    /** Unique identifier of the target network.  For type=vpc virtual connections this is the CRN of the target
     *  VPC.  This field does not apply to type=classic connections.
     */
    networkId?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayVirtualConnection` operation. */
  export namespace CreateGatewayVirtualConnectionConstants {
    /** The type of virtual connection. */
    export enum Type {
      CLASSIC = 'classic',
      VPC = 'vpc',
    }
  }

  /** Parameters for the `deleteGatewayVirtualConnection` operation. */
  export interface DeleteGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayVirtualConnection` operation. */
  export interface GetGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGatewayVirtualConnection` operation. */
  export interface UpdateGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name?: string;
    /** Status of the virtual connection.  Virtual connections that span IBM Cloud Accounts are created in
     *  approval_pending status.  The owner of the target network can accept or reject connection requests by patching
     *  status to attached or rejected respectively.
     */
    status?: UpdateGatewayVirtualConnectionConstants.Status | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGatewayVirtualConnection` operation. */
  export namespace UpdateGatewayVirtualConnectionConstants {
    /** Status of the virtual connection.  Virtual connections that span IBM Cloud Accounts are created in approval_pending status.  The owner of the target network can accept or reject connection requests by patching status to attached or rejected respectively. */
    export enum Status {
      ATTACHED = 'attached',
      REJECTED = 'rejected',
    }
  }

  /** Parameters for the `listOfferingTypeLocations` operation. */
  export interface ListOfferingTypeLocationsParams {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    offeringType: ListOfferingTypeLocationsConstants.OfferingType | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeLocations` operation. */
  export namespace ListOfferingTypeLocationsConstants {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
      CONNECT = 'connect',
    }
  }

  /** Parameters for the `listOfferingTypeLocationCrossConnectRouters` operation. */
  export interface ListOfferingTypeLocationCrossConnectRoutersParams {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    offeringType: ListOfferingTypeLocationCrossConnectRoutersConstants.OfferingType | string;
    /** The name of the Direct Link location. */
    locationName: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeLocationCrossConnectRouters` operation. */
  export namespace ListOfferingTypeLocationCrossConnectRoutersConstants {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
      CONNECT = 'connect',
    }
  }

  /** Parameters for the `listOfferingTypeSpeeds` operation. */
  export interface ListOfferingTypeSpeedsParams {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    offeringType: ListOfferingTypeSpeedsConstants.OfferingType | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeSpeeds` operation. */
  export namespace ListOfferingTypeSpeedsConstants {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
      CONNECT = 'connect',
    }
  }

  /** Parameters for the `listPorts` operation. */
  export interface ListPortsParams {
    /** A server-supplied token determining which resource to start the page on. */
    start?: string;
    /** The number of resources to return on a page. */
    limit?: number;
    /** Direct Link location short name. */
    locationName?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getPort` operation. */
  export interface GetPortParams {
    /** The port identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listGatewayAsPrepends` operation. */
  export interface ListGatewayAsPrependsParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `replaceGatewayAsPrepends` operation. */
  export interface ReplaceGatewayAsPrependsParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** If present, the request will fail if the specified ETag value does not match the resource's current ETag
     *  value.
     */
    ifMatch: string;
    /** array of AS Prepend configuration information. */
    asPrepends?: AsPrependPrefixArrayTemplate[];
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** Gateway AS Prepend object. */
  export interface AsPrepend {
    /** The date and time resource was created. */
    created_at?: string;
    /** The unique identifier for this AS Prepend. */
    id?: string;
    /** Number of times the ASN to appended to the AS Path. */
    length?: number;
    /** Route type this AS Prepend applies to. */
    policy?: string;
    /** Deprecated: Comma separated list of prefixes this AS Prepend applies to.  If empty, this applies to all
     *  prefixes.
     */
    prefix?: string;
    /** Array of prefixes this AS Prepend applies to. This parameter is not returned when AS Prepend applies to all
     *  prefixes.  Note that ordering is not significant and may differ from request order.
     */
    specific_prefixes?: string[];
    /** The date and time resource was last updated. */
    updated_at?: string;
  }

  /** array of AS Prepends. */
  export interface AsPrependCollection {
    /** array of AS Prepend information. */
    as_prepends?: AsPrependEntry[];
  }

  /** AS Prepends API object. */
  export interface AsPrependEntry {
    /** The date and time resource was created. */
    created_at?: string;
    /** The unique identifier for this AS Prepend. */
    id?: string;
    /** Number of times the ASN to appended to the AS Path. */
    length?: number;
    /** Route type this AS Prepend applies to. */
    policy?: string;
    /** Array of prefixes this AS Prepend applies to. This parameter is not returned when AS Prepend applies to all
     *  prefixes.  Note that ordering is not significant and may differ from request order.
     */
    specific_prefixes?: string[];
    /** The date and time resource was last updated. */
    updated_at?: string;
  }

  /** Create AS Prepend Configuration template. */
  export interface AsPrependPrefixArrayTemplate {
    /** Number of times the ASN to be prepended to the AS Path. */
    length: number;
    /** Route type this AS Prepend applies to. */
    policy: string;
    /** Array of prefixes this AS Prepend applies to. If this property is absent, the AS Prepend applies to all
     *  prefixes.  Note that ordering is not significant and may differ from request order.
     */
    specific_prefixes?: string[];
  }

  /** Create AS Prepend Configuration template. */
  export interface AsPrependTemplate {
    /** Number of times the ASN to be prepended to the AS Path. */
    length: number;
    /** Route type this AS Prepend applies to. */
    policy: string;
    /** Deprecated: Comma separated list of prefixes this AS Prepend applies to.  Maximum of 10 prefixes.  If not
     *  specified, this AS Prepend applies to all prefixes.
     */
    prefix?: string;
    /** Array of prefixes this AS Prepend applies to. If this property is absent, the AS Prepend applies to all
     *  prefixes.
     */
    specific_prefixes?: string[];
  }

  /** gateway port for type=connect gateways. */
  export interface CrossAccountGatewayPort {
    /** Port Identifier. */
    id: string;
  }

  /** Cross Connect Router details. */
  export interface CrossConnectRouter {
    /** Array of capabilities for this router. */
    capabilities?: string[];
    /** The name of the Router. */
    router_name?: string;
    /** Count of existing Direct Link Dedicated gateways on this router for this account. */
    total_connections?: number;
  }

  /** Collection of export route filters. */
  export interface ExportRouteFilterCollection {
    /** Array of export route filters. */
    export_route_filters: RouteFilter[];
  }

  /** gateway. */
  export interface Gateway {
    /** array of AS Prepend information. */
    as_prepends?: AsPrepend[];
    /** The identity of the standard key to use for BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authentication_key?: GatewayAuthenticationKey;
    /** BFD configuration information. */
    bfd_config?: GatewayBfdConfig;
    /** Customer BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR is deprecated and no longer recognized by the Direct Link APIs.
     *
     *  See bgp_cer_cidr and bgp_ibm_cidr fields instead for IP related information.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR. */
    bgp_cer_cidr?: string;
    /** IBM BGP ASN. */
    bgp_ibm_asn?: number;
    /** BGP IBM CIDR. */
    bgp_ibm_cidr?: string;
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Date and time bgp status was updated. */
    bgp_status_updated_at?: string;
    /** Carrier name.  Only set for type=dedicated gateways. */
    carrier_name?: string;
    /** Changes pending approval for provider managed Direct Link Connect gateways. */
    change_request?: GatewayChangeRequest;
    /** Reason for completion notice rejection.  Only included on type=dedicated gateways with a rejected completion
     *  notice.
     */
    completion_notice_reject_reason?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Indicates whether this gateway is cross account gateway. */
    cross_account: boolean;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Customer name.  Only set for type=dedicated gateways. */
    customer_name?: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_export_route_filter: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_import_route_filter: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Date and time link status was updated. */
    link_status_updated_at?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration
     *  information.  Contact IBM support for access to MACsec.
     */
    macsec_config?: GatewayMacsecConfig;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: GatewayPort;
    /** Indicates whether gateway changes must be made via a provider portal. */
    provider_api_managed?: boolean;
    /** Resource group reference. */
    resource_group?: ResourceGroupReference;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Gateway patch panel complete notification from implementation team. */
    patch_panel_completion_notice?: string;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
    /** VLAN configured for this gateway. If there is no vlan configured for the gateway, the vlan will be absent.
     *  This property will also be absent if this gateway's `crn` is in another account.
     */
    vlan?: number;
  }

  /** Applicable for create_gateway_approve requests to select the gateway's BGP MD5 authentication key. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayActionTemplateAuthenticationKey {
    /** The CRN of the [Key Protect Standard
     *  Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial) or [Hyper Protect Crypto
     *  Service Standard Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this resource.
     */
    crn: string;
  }

  /** GatewayActionTemplateUpdatesItem. */
  export interface GatewayActionTemplateUpdatesItem {
  }

  /** The identity of the standard key to use for BGP MD5 authentication key. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayAuthenticationKey {
    /** The CRN of the [Key Protect Standard
     *  Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial) or [Hyper Protect Crypto
     *  Service Standard Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this resource.
     */
    crn: string;
  }

  /** BFD configuration information. */
  export interface GatewayBfdConfig {
    /** Gateway BFD status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field must tolerate unexpected values.
     */
    bfd_status?: string;
    /** Date and time bfd status was updated. */
    bfd_status_updated_at?: string;
    /** Minimum interval in milliseconds at which the local routing device transmits hello packets and then expects
     *  to receive a reply from a neighbor with which it has established a BFD session.
     */
    interval: number;
    /** The number of hello packets not received by a neighbor that causes the originating interface to be declared
     *  down.
     */
    multiplier: number;
  }

  /** Applicable for create_gateway_approve requests to select the gateway's BFD configuration information. */
  export interface GatewayBfdConfigActionTemplate {
    /** Minimum interval in milliseconds at which the local routing device transmits hello packets and then expects
     *  to receive a reply from a neighbor with which it has established a BFD session.
     */
    interval: number;
    /** The number of hello packets not received by a neighbor that causes the originating interface to be declared
     *  down.
     */
    multiplier?: number;
  }

  /** BFD configuration information. */
  export interface GatewayBfdConfigTemplate {
    /** Minimum interval in milliseconds at which the local routing device transmits hello packets and then expects
     *  to receive a reply from a neighbor with which it has established a BFD session.
     */
    interval: number;
    /** The number of hello packets not received by a neighbor that causes the originating interface to be declared
     *  down.
     */
    multiplier?: number;
  }

  /** BFD configuration information. */
  export interface GatewayBfdPatchTemplate {
    /** Minimum interval in milliseconds at which the local routing device transmits hello packets and then expects
     *  to receive a reply from a neighbor with which it has established a BFD session.
     *
     *  To clear the BFD configuration patch its interval to 0.
     */
    interval?: number;
    /** The number of hello packets not received by a neighbor that causes the originating interface to be declared
     *  down.
     */
    multiplier?: number;
  }

  /** GatewayChangeRequest. */
  export interface GatewayChangeRequest {
  }

  /** GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem {
  }

  /** List of gateways. */
  export interface GatewayCollection {
    /** Collection of Direct Link gateways. */
    gateways: GatewayCollectionGatewaysItem[];
  }

  /** GatewayCollectionGatewaysItem. */
  export interface GatewayCollectionGatewaysItem {
  }

  /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration information.  Contact IBM support for access to MACsec. */
  export interface GatewayMacsecConfig {
    /** Indicate whether MACsec should currently be active (true) or inactive (false) for a MACsec enabled gateway.
     *   To be MACsec enabled a `macsec_config` must be specified at gateway create time.
     */
    active: boolean;
    /** Active connectivity association key.
     *
     *  During normal operation `active_cak` will match the desired `primary_cak`.  During CAK changes this field can be
     *  used to indicate which key is currently active on the gateway.
     */
    active_cak?: GatewayMacsecConfigActiveCak;
    /** SAK cipher suite. */
    cipher_suite?: string;
    /** confidentiality offset. */
    confidentiality_offset?: number;
    /** cryptographic algorithm. */
    cryptographic_algorithm?: string;
    /** fallback connectivity association key. */
    fallback_cak?: GatewayMacsecConfigFallbackCak;
    /** key server priority. */
    key_server_priority?: number;
    /** desired primary connectivity association key. */
    primary_cak: GatewayMacsecConfigPrimaryCak;
    /** Secure Association Key (SAK) expiry time in seconds. */
    sak_expiry_time?: number;
    /** Packets without MACsec headers are dropped when security_policy is `must_secure`. */
    security_policy?: string;
    /** Current status of MACsec on this gateway.
     *
     *  Status 'offline' is returned during gateway creation and deletion.
     */
    status: string;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Active connectivity association key. During normal operation `active_cak` will match the desired `primary_cak`.  During CAK changes this field can be used to indicate which key is currently active on the gateway. */
  export interface GatewayMacsecConfigActiveCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** fallback connectivity association key. */
  export interface GatewayMacsecConfigFallbackCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** MACsec configuration information.  When patching any macsec_config fields, no other fields may be specified in the patch request.  Contact IBM support for access to MACsec. A MACsec config cannot be added to a gateway created without MACsec. */
  export interface GatewayMacsecConfigPatchTemplate {
    /** Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled
     *  gateway.
     */
    active?: boolean;
    /** Fallback connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     *
     *  To clear the optional `fallback_cak` field patch its crn to `""`.
     *
     *  A gateway's `fallback_cak` crn cannot match its `primary_cak` crn.
     */
    fallback_cak?: GatewayMacsecConfigPatchTemplateFallbackCak;
    /** Desired primary connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     *
     *  A gateway's `primary_cak` crn cannot match its `fallback_cak` crn.
     */
    primary_cak?: GatewayMacsecConfigPatchTemplatePrimaryCak;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Fallback connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. To clear the optional `fallback_cak` field patch its crn to `""`. A gateway's `fallback_cak` crn cannot match its `primary_cak` crn. */
  export interface GatewayMacsecConfigPatchTemplateFallbackCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** Desired primary connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. A gateway's `primary_cak` crn cannot match its `fallback_cak` crn. */
  export interface GatewayMacsecConfigPatchTemplatePrimaryCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** desired primary connectivity association key. */
  export interface GatewayMacsecConfigPrimaryCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** MACsec configuration information.  Contact IBM support for access to MACsec. */
  export interface GatewayMacsecConfigTemplate {
    /** Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled
     *  gateway.
     */
    active: boolean;
    /** Fallback connectivity association key.
     *
     *  The `fallback_cak` crn cannot match the `primary_cak` crn.
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     */
    fallback_cak?: GatewayMacsecConfigTemplateFallbackCak;
    /** Desired primary connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     */
    primary_cak: GatewayMacsecConfigTemplatePrimaryCak;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Fallback connectivity association key. The `fallback_cak` crn cannot match the `primary_cak` crn. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. */
  export interface GatewayMacsecConfigTemplateFallbackCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** Desired primary connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. */
  export interface GatewayMacsecConfigTemplatePrimaryCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** The identity of the standard key to use for BGP MD5 authentication key. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayPatchTemplateAuthenticationKey {
    /** The CRN of the [Key Protect Standard
     *  Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial) or [Hyper Protect Crypto
     *  Service Standard Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this resource.
     */
    crn: string;
  }

  /** gateway port for type=connect gateways. */
  export interface GatewayPort {
    /** Port Identifier. */
    id: string;
  }

  /** Select Port Label for new type=connect gateway. */
  export interface GatewayPortIdentity {
    /** port id. */
    id: string;
  }

  /** Gateway statistics and debug commands. */
  export interface GatewayStatistic {
    /** Date and time data was collected. */
    created_at: string;
    /** statistics output. */
    data: string;
    /** statistic type. */
    type: string;
  }

  /** gateway statistics. */
  export interface GatewayStatisticCollection {
    /** Collection of gateway statistics. */
    statistics: GatewayStatistic[];
  }

  /** GatewayStatus. */
  export interface GatewayStatus {
  }

  /** gateway status. */
  export interface GatewayStatusCollection {
    /** array of status. */
    status?: GatewayStatus[];
  }

  /** Create gateway template. */
  export interface GatewayTemplate {
    /** array of AS Prepend configuration information. */
    as_prepends?: AsPrependTemplate[];
    /** The identity of the standard key to use for BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authentication_key?: GatewayTemplateAuthenticationKey;
    /** BFD configuration information. */
    bfd_config?: GatewayBfdConfigTemplate;
    /** BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR.
     *
     *  Field is deprecated.  See bgp_ibm_cidr and bgp_cer_cidr for details on how to create a gateway using either
     *  automatic or explicit IP assignment.  Any bgp_base_cidr value set will be ignored.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR.
     *
     *  For auto IP assignment, omit bgp_cer_cidr and bgp_ibm_cidr.  IBM will automatically select values for
     *  bgp_cer_cidr and bgp_ibm_cidr.
     *
     *  For explicit IP assignment set a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must reside in one of
     *  "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and
     *  bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_cer_cidr?: string;
    /** BGP IBM CIDR.
     *
     *  For auto IP assignment, omit bgp_cer_cidr and bgp_ibm_cidr.  IBM will automatically select values for
     *  bgp_cer_cidr and bgp_ibm_cidr.
     *
     *  For explicit IP assignment set a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must reside in one of
     *  "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and
     *  bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_ibm_cidr?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_export_route_filter?: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_import_route_filter?: string;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    export_route_filters?: GatewayTemplateRouteFilter[];
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** Array of directional route filters for a Direct Link gateway. When creating a gateway or replacing existing
     *  route filters, the order of the items in the array will set the ordering of the list of route filters.
     */
    import_route_filters?: GatewayTemplateRouteFilter[];
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway patch panel complete notification from implementation team. */
    patch_panel_completion_notice?: string;
    /** Resource group for this resource. If unspecified, the account's [default resource
     *  group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
     */
    resource_group?: ResourceGroupIdentity;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Offering type. */
    type: string;
  }

  /** The identity of the standard key to use for BGP MD5 authentication key. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayTemplateAuthenticationKey {
    /** The CRN of the [Key Protect Standard
     *  Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial) or [Hyper Protect Crypto
     *  Service Standard Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this resource.
     */
    crn: string;
  }

  /** The route filter create template within the Direct Link gateway create template. */
  export interface GatewayTemplateRouteFilter {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to). */
    ge?: number;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to). */
    le?: number;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix: string;
  }

  /** Virtual connection. */
  export interface GatewayVirtualConnection {
    /** The date and time resource was created. */
    created_at: string;
    /** The unique identifier for this virtual connection. */
    id: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name: string;
    /** For virtual connections across two different IBM Cloud Accounts network_account indicates the account that
     *  owns the target network.
     */
    network_account?: string;
    /** Unique identifier of the target network.  For type=vpc virtual connections this is the CRN of the target
     *  VPC.  This field does not apply to type=classic connections.
     */
    network_id?: string;
    /** Status of the virtual connection.
     *
     *  The list of enumerated values for this property may expand in the future. Code and processes using this field
     *  must tolerate unexpected values.
     */
    status: string;
    /** Virtual connection type.
     *
     *  The list of enumerated values for this property may expand in the future. Code and processes using this field
     *  must tolerate unexpected values.
     */
    type: string;
  }

  /** Virtual connection collection. */
  export interface GatewayVirtualConnectionCollection {
    /** virtual connection array. */
    virtual_connections: GatewayVirtualConnection[];
  }

  /** GetGatewayResponse. */
  export interface GetGatewayResponse {
  }

  /** Collection of import route filters. */
  export interface ImportRouteFilterCollection {
    /** Array of import route filters. */
    import_route_filters: RouteFilter[];
  }

  /** location collection. */
  export interface LocationCollection {
    /** Collection of Direct Link locations. */
    locations: LocationOutput[];
  }

  /** List of cross connect router details. */
  export interface LocationCrossConnectRouterCollection {
    /** Array of Routers for this location. */
    cross_connect_routers?: CrossConnectRouter[];
  }

  /** location. */
  export interface LocationOutput {
    /** Billing location.  Only present for locations where provisioning is enabled. */
    billing_location?: string;
    /** Building colocation owner.  Only present for offering_type=dedicated locations where provisioning is
     *  enabled.
     */
    building_colocation_owner?: string;
    /** Location long name. */
    display_name: string;
    /** Location type. */
    location_type: string;
    /** Indicate whether location supports MACsec.  Only returned for gateway type=dedicated locations.  Contact IBM
     *  support for access to MACsec.
     */
    macsec_enabled?: boolean;
    /** Location market. */
    market: string;
    /** Location geography.  Only present for locations where provisioning is enabled. */
    market_geography?: string;
    /** Is location a multi-zone region (MZR).  Only present for locations where provisioning is enabled. */
    mzr?: boolean;
    /** Location short name. */
    name: string;
    /** Location offering type. */
    offering_type: string;
    /** Indicates for the specific offering_type whether this location supports gateway provisioning. */
    provision_enabled: boolean;
    /** Location's VPC region.  Only present for locations where provisioning is enabled. */
    vpc_region?: string;
  }

  /** Speed. */
  export interface OfferingSpeed {
    /** Array of capabilities for billing option. */
    capabilities: string[];
    /** Link speed in megabits per second. */
    link_speed: number;
    /** Indicate whether speed supports MACsec.  Only returned for gateway type=dedicated speeds.  Contact IBM
     *  support for access to MACsec.
     */
    macsec_enabled?: boolean;
  }

  /** List of speeds. */
  export interface OfferingSpeedCollection {
    /** speed list. */
    speeds: OfferingSpeed[];
  }

  /** Provider port details. */
  export interface Port {
    /** Count of existing Direct Link gateways in this account on this port. */
    direct_link_count: number;
    /** Port identifier. */
    id: string;
    /** Port Label. */
    label: string;
    /** Port location long name. */
    location_display_name: string;
    /** Port location name identifier. */
    location_name: string;
    /** Port's provider name. */
    provider_name: string;
    /** Port's supported speeds in megabits per second. */
    supported_link_speeds: number[];
  }

  /** List of port label details. */
  export interface PortCollection {
    /** A reference to the first page of resources. */
    first: PortsPaginatedCollectionFirst;
    /** The maximum number of resources can be returned by the request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: PortsPaginatedCollectionNext;
    /** The total number of resources across all pages. */
    total_count: number;
    /** Array of ports. */
    ports?: Port[];
  }

  /** A reference to the first page of resources. */
  export interface PortsPaginatedCollectionFirst {
    /** The URL for the first page of resources. */
    href: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface PortsPaginatedCollectionNext {
    /** URL for the next page of resources. */
    href: string;
    /** start token for the next page of resources. */
    start?: string;
  }

  /** Resource group for this resource. If unspecified, the account's [default resource group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupIdentity {
    /** Resource group identifier. */
    id: string;
  }

  /** Resource group reference. */
  export interface ResourceGroupReference {
    /** Resource group identifier. */
    id: string;
  }

  /** Route filter. */
  export interface RouteFilter {
    /** Determines whether routes that match the prefix-set will be allowed (permit) or rejected (deny) through the
     *  filter.
     */
    action: string;
    /** Identifier of the next route filter considered if a route does not match the current filter. This property
     *  builds the ordering among route filters and follows semantics:
     *  - When before is an identifier of a route filter that exists and is in the same collection, a route will first
     *  attempt to match on the current filter before preceding to the filter referenced in this property.
     *  - When a filter is created with before that matches another filter in the same collection, the existing filter
     *  will take precedence. The before of the existing filter will be updated to refer to the newly created filter.
     *  The newly created filter will refer to the route filter identified by the provided before.
     *  - When a filter is created without a before, it takes the lowest precedence. The existing filter of lowest
     *  precedence will be updated to refer to the newly created filter.
     */
    before?: string;
    /** The date and time the route filter was created in ISO 8601 format. */
    created_at: string;
    /** The minimum matching length of the prefix-set (mnemonic for greater than or equal to). */
    ge?: number;
    /** The identifier of a route filter. */
    id: string;
    /** The maximum matching length of the prefix-set (mnemonic for less than or equal to). */
    le?: number;
    /** IP prefix representing an address and mask length of the prefix-set. */
    prefix: string;
    /** The date and time the route filter was last updated. */
    updated_at: string;
  }

  /** route report. */
  export interface RouteReport {
    /** Array of connection prefixes advertised to the on-prem network. This parameter is not returned when the
     *  route report was generated prior to inclusion of this parameter.
     */
    advertised_routes?: RouteReportAdvertisedRoute[];
    /** Date and time route report was requested. */
    created_at: string;
    /** Array of local/direct routes. */
    gateway_routes: RouteReportRoute[];
    /** Report identifier. */
    id: string;
    /** Array of on premises routes. */
    on_prem_routes: RouteReportOnPremRoute[];
    /** Array of overlapping routes. */
    overlapping_routes: RouteReportOverlappingRouteGroup[];
    /** Route report status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field must tolerate unexpected values.
     */
    status: string;
    /** Date and time route report was last modified. */
    updated_at?: string;
    /** Array of routes on virtual connections. */
    virtual_connection_routes: RouteReportConnection[];
  }

  /** Route advertised to the on-prem network. */
  export interface RouteReportAdvertisedRoute {
    /** The BGP AS path of the route. */
    as_path: string;
    /** prefix. */
    prefix: string;
  }

  /** route reports. */
  export interface RouteReportCollection {
    /** Array of route reports. */
    route_reports: RouteReport[];
  }

  /** Routes of a virtual connection. */
  export interface RouteReportConnection {
    /** Array of virtual connection's routes. */
    routes: RouteReportVirtualConnectionRoute[];
    /** ID of virtual connection. */
    virtual_connection_id?: string;
    /** name of virtual connection. */
    virtual_connection_name?: string;
    /** type of virtual connection. */
    virtual_connection_type?: string;
  }

  /** on-prem route. */
  export interface RouteReportOnPremRoute {
    /** The BGP AS path of the route. */
    as_path?: string;
    /** Next hop address. */
    next_hop?: string;
    /** prefix. */
    prefix?: string;
  }

  /** overlapping route details. */
  export interface RouteReportOverlappingRoute {
  }

  /** Collection of overlapping route. */
  export interface RouteReportOverlappingRouteGroup {
    /** Array of overlapping connection/prefix pairs. */
    routes?: RouteReportOverlappingRoute[];
  }

  /** route. */
  export interface RouteReportRoute {
    /** prefix. */
    prefix?: string;
  }

  /** A route originating from an attached virtual connection. */
  export interface RouteReportVirtualConnectionRoute {
    /** Indicates whether the route is the preferred path of the prefix. */
    active?: boolean;
    /** The local preference of the route. This attribute can manipulate the chosen path on routes. */
    local_preference?: string;
    /** prefix. */
    prefix: string;
  }

  /** The autonomous system number (ASN) of Border Gateway Protocol (BGP) configuration for the IBM side of the DL 2.0 gateway. */
  export interface GatewayActionTemplateUpdatesItemGatewayClientBGPASNUpdate extends GatewayActionTemplateUpdatesItem {
    /** New gateway BGP ASN. */
    bgp_asn?: number;
  }

  /** Update BGP customer and IBM CIDR. */
  export interface GatewayActionTemplateUpdatesItemGatewayClientBGPIPUpdate extends GatewayActionTemplateUpdatesItem {
    /** BGP customer edge router CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on
     *  customer edge router for the DL 2.0 gateway.
     *
     *  Customer edge IP and IBM IP should be in the same network. Updating customer edge router CIDR should be
     *  accompanied with IBM CIDR in the request. Update customer edge router IP to a valid bgp_cer_cidr and
     *  bgp_ibm_cidr CIDR, the value must reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16",
     *  "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet
     *  mask values.
     */
    bgp_cer_cidr?: string;
    /** BGP IBM CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on IBM edge router for the
     *  DL 2.0 gateway.
     *
     *  IBM IP and customer edge IP should be in the same network. Updating IBM CIDR should be accompanied with customer
     *  edge router CIDR in the request. Update IBM CIDR to a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must
     *  reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.
     *  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_ibm_cidr?: string;
  }

  /** gateway speed change. */
  export interface GatewayActionTemplateUpdatesItemGatewayClientSpeedUpdate extends GatewayActionTemplateUpdatesItem {
    /** New gateway speed in megabits per second. */
    speed_mbps?: number;
  }

  /** Update VLAN for this gateway VLAN provided should be in the range 2 to 3967. */
  export interface GatewayActionTemplateUpdatesItemGatewayClientVLANUpdate extends GatewayActionTemplateUpdatesItem {
    /** VLAN to be updated for this gateway. */
    vlan?: number;
  }

  /** The autonomous system number (ASN) of Border Gateway Protocol (BGP) configuration for the IBM side of the DL 2.0 gateway. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItemGatewayClientBGPASNUpdate extends GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem {
    /** New gateway BGP ASN. */
    bgp_asn?: number;
  }

  /** Update BGP customer and IBM CIDR. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItemGatewayClientBGPIPUpdate extends GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem {
    /** BGP customer edge router CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on
     *  customer edge router for the DL 2.0 gateway.
     *
     *  Customer edge IP and IBM IP should be in the same network. Updating customer edge router CIDR should be
     *  accompanied with IBM CIDR in the request. Update customer edge router IP to a valid bgp_cer_cidr and
     *  bgp_ibm_cidr CIDR, the value must reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16",
     *  "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet
     *  mask values.
     */
    bgp_cer_cidr?: string;
    /** BGP IBM CIDR is the new CIDR (Classless Inter-Domain Routing) value to be updated on IBM edge router for the
     *  DL 2.0 gateway.
     *
     *  IBM IP and customer edge IP should be in the same network. Updating IBM CIDR should be accompanied with customer
     *  edge router CIDR in the request. Update IBM CIDR to a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must
     *  reside in one of "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.
     *  bgp_cer_cidr and bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_ibm_cidr?: string;
  }

  /** gateway speed change. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItemGatewayClientSpeedUpdate extends GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem {
    /** New gateway speed in megabits per second. */
    speed_mbps?: number;
  }

  /** Update VLAN for this gateway VLAN provided should be in the range 2 to 3967. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItemGatewayClientVLANUpdate extends GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem {
    /** VLAN to be updated for this gateway. */
    vlan?: number;
  }

  /** gateway create. */
  export interface GatewayChangeRequestGatewayClientGatewayCreate extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
  }

  /** gateway delete. */
  export interface GatewayChangeRequestGatewayClientGatewayDelete extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
  }

  /** gateway attributes update. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributes extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
    /** array of pending updates. */
    updates: GatewayChangeRequestGatewayClientGatewayUpdateAttributesUpdatesItem[];
  }

  /** cross-account gateway read-only view. */
  export interface GatewayCollectionGatewaysItemCrossAccountGateway extends GatewayCollectionGatewaysItem {
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Date and time bgp status was updated. */
    bgp_status_updated_at?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Indicates whether this gateway is cross account gateway. */
    cross_account: boolean;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Date and time link status was updated. */
    link_status_updated_at?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: CrossAccountGatewayPort;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
  }

  /** gateway. */
  export interface GatewayCollectionGatewaysItemGateway extends GatewayCollectionGatewaysItem {
    /** array of AS Prepend information. */
    as_prepends?: AsPrepend[];
    /** The identity of the standard key to use for BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authentication_key?: GatewayAuthenticationKey;
    /** BFD configuration information. */
    bfd_config?: GatewayBfdConfig;
    /** Customer BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR is deprecated and no longer recognized by the Direct Link APIs.
     *
     *  See bgp_cer_cidr and bgp_ibm_cidr fields instead for IP related information.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR. */
    bgp_cer_cidr?: string;
    /** IBM BGP ASN. */
    bgp_ibm_asn?: number;
    /** BGP IBM CIDR. */
    bgp_ibm_cidr?: string;
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Date and time bgp status was updated. */
    bgp_status_updated_at?: string;
    /** Carrier name.  Only set for type=dedicated gateways. */
    carrier_name?: string;
    /** Changes pending approval for provider managed Direct Link Connect gateways. */
    change_request?: GatewayChangeRequest;
    /** Reason for completion notice rejection.  Only included on type=dedicated gateways with a rejected completion
     *  notice.
     */
    completion_notice_reject_reason?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Indicates whether this gateway is cross account gateway. */
    cross_account: boolean;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Customer name.  Only set for type=dedicated gateways. */
    customer_name?: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_export_route_filter: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_import_route_filter: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Date and time link status was updated. */
    link_status_updated_at?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration
     *  information.  Contact IBM support for access to MACsec.
     */
    macsec_config?: GatewayMacsecConfig;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: GatewayPort;
    /** Indicates whether gateway changes must be made via a provider portal. */
    provider_api_managed?: boolean;
    /** Resource group reference. */
    resource_group?: ResourceGroupReference;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Gateway patch panel complete notification from implementation team. */
    patch_panel_completion_notice?: string;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
    /** VLAN configured for this gateway. If there is no vlan configured for the gateway, the vlan will be absent.
     *  This property will also be absent if this gateway's `crn` is in another account.
     */
    vlan?: number;
  }

  /** Gateway bfd status. */
  export interface GatewayStatusGatewayBFDStatus extends GatewayStatus {
    /** Status type. */
    type: string;
    /** Date and time status was collected. */
    updated_at: string;
    /** Status. */
    value: string;
  }

  /** Gateway bgp status. */
  export interface GatewayStatusGatewayBGPStatus extends GatewayStatus {
    /** Status type. */
    type: string;
    /** Date and time status was collected. */
    updated_at: string;
    /** Status. */
    value: string;
  }

  /** Gateway link status. Only available for dedicated gateways. */
  export interface GatewayStatusGatewayLinkStatus extends GatewayStatus {
    /** Status type. */
    type: string;
    /** Date and time status was collected. */
    updated_at: string;
    /** Status. */
    value: string;
  }

  /** Gateway fields specific to type=connect gateway create. */
  export interface GatewayTemplateGatewayTypeConnectTemplate extends GatewayTemplate {
    /** Select Port Label for new type=connect gateway. */
    port: GatewayPortIdentity;
  }

  /** Gateway fields specific to type=dedicated gateway create. */
  export interface GatewayTemplateGatewayTypeDedicatedTemplate extends GatewayTemplate {
    /** Carrier name. */
    carrier_name: string;
    /** Cross connect router. */
    cross_connect_router: string;
    /** Customer name. */
    customer_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  Contact IBM support for access to MACsec. */
    macsec_config?: GatewayMacsecConfigTemplate;
    /** The VLAN to configure for this gateway. */
    vlan?: number;
  }

  /** cross-account gateway read-only view. */
  export interface GetGatewayResponseCrossAccountGateway extends GetGatewayResponse {
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Date and time bgp status was updated. */
    bgp_status_updated_at?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Indicates whether this gateway is cross account gateway. */
    cross_account: boolean;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Date and time link status was updated. */
    link_status_updated_at?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: CrossAccountGatewayPort;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
  }

  /** gateway. */
  export interface GetGatewayResponseGateway extends GetGatewayResponse {
    /** array of AS Prepend information. */
    as_prepends?: AsPrepend[];
    /** The identity of the standard key to use for BGP MD5 authentication key.
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authentication_key?: GatewayAuthenticationKey;
    /** BFD configuration information. */
    bfd_config?: GatewayBfdConfig;
    /** Customer BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR is deprecated and no longer recognized by the Direct Link APIs.
     *
     *  See bgp_cer_cidr and bgp_ibm_cidr fields instead for IP related information.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR. */
    bgp_cer_cidr?: string;
    /** IBM BGP ASN. */
    bgp_ibm_asn?: number;
    /** BGP IBM CIDR. */
    bgp_ibm_cidr?: string;
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Date and time bgp status was updated. */
    bgp_status_updated_at?: string;
    /** Carrier name.  Only set for type=dedicated gateways. */
    carrier_name?: string;
    /** Changes pending approval for provider managed Direct Link Connect gateways. */
    change_request?: GatewayChangeRequest;
    /** Reason for completion notice rejection.  Only included on type=dedicated gateways with a rejected completion
     *  notice.
     */
    completion_notice_reject_reason?: string;
    /** Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit
     *  Gateway Service and direct means this Gateway will be attached to vpc or classic connection. The list of
     *  enumerated values for this property may expand in the future. Code and processes using this field  must tolerate
     *  unexpected values.
     */
    connection_mode?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Indicates whether this gateway is cross account gateway. */
    cross_account: boolean;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Customer name.  Only set for type=dedicated gateways. */
    customer_name?: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_export_route_filter: string;
    /** The default directional route filter action that applies to routes that do not match any directional route
     *  filters.
     */
    default_import_route_filter: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Date and time link status was updated. */
    link_status_updated_at?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration
     *  information.  Contact IBM support for access to MACsec.
     */
    macsec_config?: GatewayMacsecConfig;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: GatewayPort;
    /** Indicates whether gateway changes must be made via a provider portal. */
    provider_api_managed?: boolean;
    /** Resource group reference. */
    resource_group?: ResourceGroupReference;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Gateway patch panel complete notification from implementation team. */
    patch_panel_completion_notice?: string;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
    /** VLAN configured for this gateway. If there is no vlan configured for the gateway, the vlan will be absent.
     *  This property will also be absent if this gateway's `crn` is in another account.
     */
    vlan?: number;
  }

  /** overlapping route details. */
  export interface RouteReportOverlappingRouteForConnection extends RouteReportOverlappingRoute {
    /** overlapping prefix. */
    prefix: string;
    /** type of the route. */
    type: string;
    /** virtual connection ID. */
    virtual_connection_id: string;
  }

  /** overlapping route details. */
  export interface RouteReportOverlappingRouteForOthers extends RouteReportOverlappingRoute {
    /** overlapping prefix. */
    prefix: string;
    /** type of the route. */
    type: string;
  }

  /*************************
   * pager classes
   ************************/

  /**
   * PortsPager can be used to simplify the use of listPorts().
   */
  export class PortsPager {
    protected _hasNext: boolean;

    protected pageContext: any;

    protected client: DirectLinkV1;

    protected params: DirectLinkV1.ListPortsParams;

    /**
     * Construct a PortsPager object.
     *
     * @param {DirectLinkV1}  client - The service client instance used to invoke listPorts()
     * @param {Object} [params] - The parameters to be passed to listPorts()
     * @constructor
     * @returns {PortsPager}
     */
    constructor(client: DirectLinkV1, params?: DirectLinkV1.ListPortsParams) {
      if (params && params.start) {
        throw new Error(`the params.start field should not be set`);
      }

      this._hasNext = true;
      this.pageContext = { next: undefined };
      this.client = client;
      this.params = JSON.parse(JSON.stringify(params || {}));
    }

    /**
     * Returns true if there are potentially more results to be retrieved by invoking getNext().
     * @returns {boolean}
     */
    public hasNext(): boolean {
      return this._hasNext;
    }

    /**
     * Returns the next page of results by invoking listPorts().
     * @returns {Promise<DirectLinkV1.Port[]>}
     */
    public async getNext(): Promise<DirectLinkV1.Port[]> {
      if (!this.hasNext()) {
        throw new Error('No more results available');
      }

      if (this.pageContext.next) {
        this.params.start = this.pageContext.next;
      }
      const response = await this.client.listPorts(this.params);
      const { result } = response;

      let next;
      if (result && result.next) {
        next = result.next.start;
      }
      this.pageContext.next = next;
      if (!this.pageContext.next) {
        this._hasNext = false;
      }
      return result.ports;
    }

    /**
     * Returns all results by invoking listPorts() repeatedly until all pages of results have been retrieved.
     * @returns {Promise<DirectLinkV1.Port[]>}
     */
    public async getAll(): Promise<DirectLinkV1.Port[]> {
      const results: Port[] = [];
      while (this.hasNext()) {
        const nextPage = await this.getNext();
        results.push(...nextPage);
      }
      return results;
    }
  }
}

export = DirectLinkV1;
