/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { Authenticator, BaseService, getAuthenticatorFromEnvironment, getMissingParams, UserOptions } from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 */

class DirectLinkV1 extends BaseService {

  static DEFAULT_SERVICE_URL: string = 'https://directlink.cloud.ibm.com/v1';
  static DEFAULT_SERVICE_NAME: string = 'direct_link';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of DirectLinkV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {DirectLinkV1}
   */

  public static newInstance(options: UserOptions): DirectLinkV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new DirectLinkV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }


  /** Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to the
   *  current date may be provided. Specify the current date to request the latest version.
   */
  version: string;

  /**
   * Construct a DirectLinkV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} options.version - Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date
   * from 2019-12-13 up to the current date may be provided. Specify the current date to request the latest version.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/v1'). The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {DirectLinkV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    const requiredParams = ['version'];
    const missingParams = getMissingParams(options, requiredParams);
    if (missingParams) {
      throw missingParams;
    }
    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(DirectLinkV1.DEFAULT_SERVICE_URL);
    }
    this.version = options.version;
  }

  /*************************
   * gateways
   ************************/

  /**
   * List gateways.
   *
   * List all Direct Link gateways in this account.  Gateways in other accounts with connections to networks in this
   * account are also returned.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayCollection>>}
   */
  public listGateways(params?: DirectLinkV1.ListGatewaysParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayCollection>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'version': this.version
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGateways');

      const parameters = {
        options: {
          url: '/gateways',
          method: 'GET',
          qs: query,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Create gateway.
   *
   * Creates a Direct Link gateway based on the supplied template.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {GatewayTemplate} params.gatewayTemplate - The Direct Link Gateway template.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public createGateway(params: DirectLinkV1.CreateGatewayParams): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayTemplate'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = _params.gatewayTemplate;
      const query = {
        'version': this.version
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGateway');

      const parameters = {
        options: {
          url: '/gateways',
          method: 'POST',
          body,
          qs: query,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Delete gateway.
   *
   * Delete a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Empty>>}
   */
  public deleteGateway(params: DirectLinkV1.DeleteGatewayParams): Promise<DirectLinkV1.Response<DirectLinkV1.Empty>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGateway');

      const parameters = {
        options: {
          url: '/gateways/{id}',
          method: 'DELETE',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get gateway.
   *
   * Retrieve a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public getGateway(params: DirectLinkV1.GetGatewayParams): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGateway');

      const parameters = {
        options: {
          url: '/gateways/{id}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Update gateway.
   *
   * Update a Direct Link gateway.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link gateway identifier.
   * @param {boolean} [params.global] - Gateways with global routing (`true`) can connect to networks outside of their
   * associated region.
   * @param {string} [params.loaRejectReason] - Use this field during LOA rejection to provide the reason for the
   * rejection.
   *
   * Only allowed for type=dedicated gateways.
   * @param {GatewayMacsecConfigPatchTemplate} [params.macsecConfig] - MACsec configuration information.  When patching
   * any macsec_config fields, no other fields may be specified in the patch request.  Contact IBM support for access to
   * MACsec.
   *
   * A MACsec config cannot be added to a gateway created without MACsec.
   * @param {boolean} [params.metered] - Metered billing option.  When `true` gateway usage is billed per gigabyte.
   * When `false` there is no per gigabyte usage charge, instead a flat rate is charged for the gateway.
   * @param {string} [params.name] - The unique user-defined name for this gateway.
   * @param {string} [params.operationalStatus] - Gateway operational status.
   *
   * For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its LOA.
   * When rejecting an LOA, provide reject reasoning in `loa_reject_reason`.
   *
   * Only allowed for type=dedicated gateways.
   * @param {number} [params.speedMbps] - Gateway speed in megabits per second.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public updateGateway(params: DirectLinkV1.UpdateGatewayParams): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'global': _params.global,
        'loa_reject_reason': _params.loaRejectReason,
        'macsec_config': _params.macsecConfig,
        'metered': _params.metered,
        'name': _params.name,
        'operational_status': _params.operationalStatus,
        'speed_mbps': _params.speedMbps
      };

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGateway');

      const parameters = {
        options: {
          url: '/gateways/{id}',
          method: 'PATCH',
          body,
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Approve or reject change requests.
   *
   * Approve or reject a gateway's current oustanding change request.
   *
   * This API is only used for provider created Direct Link Connect gateways to approve or reject specific changes
   * initiated from a provider portal.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Connect gateway identifier.
   * @param {string} params.action - Action request.
   * @param {GatewayActionTemplateAuthenticationKey} [params.authenticationKey] - BGP MD5 authentication key.
   *
   * BGP MD5 keys must be type=standard.
   *
   * The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters
   * in length.
   *
   * To clear the optional `authentication_key` field patch its crn to `""`.
   * @param {boolean} [params.global] - Required for create_gateway_approve requests to select the gateway's routing
   * option.  Gateways with global routing (`true`) can connect to networks outside of their associated region.
   * @param {boolean} [params.metered] - Required for create_gateway_approve requests to select the gateway's metered
   * billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per gigabyte usage
   * charge, instead a flat rate is charged for the gateway.
   * @param {ResourceGroupIdentity} [params.resourceGroup] - Set for create_gateway_approve requests to select the
   * gateway's resource group.  If unspecified on create_gateway_approve, the account's [default resource
   * group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
   * @param {JsonObject[]} [params.updates] - Specify attribute updates being approved or rejected,
   * update_attributes_approve and update_attributes_reject actions must provide an updates field that matches the
   * gateway's current pending changes.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>>}
   */
  public createGatewayAction(params: DirectLinkV1.CreateGatewayActionParams): Promise<DirectLinkV1.Response<DirectLinkV1.Gateway>> {
    const _params = extend({}, params);
    const requiredParams = ['id', 'action'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'action': _params.action,
        'authentication_key': _params.authenticationKey,
        'global': _params.global,
        'metered': _params.metered,
        'resource_group': _params.resourceGroup,
        'updates': _params.updates
      };

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayAction');

      const parameters = {
        options: {
          url: '/gateways/{id}/actions',
          method: 'POST',
          body,
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get completion notice.
   *
   * Retrieve a Direct Link Dedicated gateway's completion notice.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<NodeJS.ReadableStream|Buffer>>}
   */
  public listGatewayCompletionNotice(params: DirectLinkV1.ListGatewayCompletionNoticeParams): Promise<DirectLinkV1.Response<NodeJS.ReadableStream|Buffer>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayCompletionNotice');

      const parameters = {
        options: {
          url: '/gateways/{id}/completion_notice',
          method: 'GET',
          qs: query,
          path,
          responseType: 'stream',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/pdf',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Create completion notice.
   *
   * Upload a Direct Link Dedicated gateway completion notice.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {NodeJS.ReadableStream|Buffer} [params.upload] - Completion notice PDF file.
   * @param {string} [params.uploadContentType] - The content type of upload.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Empty>>}
   */
  public createGatewayCompletionNotice(params: DirectLinkV1.CreateGatewayCompletionNoticeParams): Promise<DirectLinkV1.Response<DirectLinkV1.Empty>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const formData = {
        'upload': {
          data: _params.upload,
          contentType: _params.uploadContentType
        }
      };

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayCompletionNotice');

      const parameters = {
        options: {
          url: '/gateways/{id}/completion_notice',
          method: 'PUT',
          qs: query,
          path,
          formData
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Content-Type': 'multipart/form-data',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get letter of authorization.
   *
   * Retrieve a Direct Link Dedicated gateway's Letter of Authorization.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<NodeJS.ReadableStream|Buffer>>}
   */
  public listGatewayLetterOfAuthorization(params: DirectLinkV1.ListGatewayLetterOfAuthorizationParams): Promise<DirectLinkV1.Response<NodeJS.ReadableStream|Buffer>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayLetterOfAuthorization');

      const parameters = {
        options: {
          url: '/gateways/{id}/letter_of_authorization',
          method: 'GET',
          qs: query,
          path,
          responseType: 'stream',
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/pdf',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Gateway statistics.
   *
   * Retrieve gateway statistics.  Specify statistic to retrieve using required `type` query parameter.  Currently data
   * retrieval is only supported for MACsec configurations.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - Direct Link Dedicated gateway identifier.
   * @param {string} params.type - specify statistic to retrieve.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatisticCollection>>}
   */
  public getGatewayStatistics(params: DirectLinkV1.GetGatewayStatisticsParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayStatisticCollection>> {
    const _params = extend({}, params);
    const requiredParams = ['id', 'type'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'type': _params.type,
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayStatistics');

      const parameters = {
        options: {
          url: '/gateways/{id}/statistics',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * offeringInformation
   ************************/

  /**
   * List available locations.
   *
   * Retrieve the list of valid locations for the specified Direct Link offering.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Current supported values are `"dedicated"`
   * and `"connect"`.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.LocationCollection>>}
   */
  public listOfferingTypeLocations(params: DirectLinkV1.ListOfferingTypeLocationsParams): Promise<DirectLinkV1.Response<DirectLinkV1.LocationCollection>> {
    const _params = extend({}, params);
    const requiredParams = ['offeringType'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'offering_type': _params.offeringType
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeLocations');

      const parameters = {
        options: {
          url: '/offering_types/{offering_type}/locations',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * List routers.
   *
   * Retrieve location specific cross connect router information.  Only valid for offering_type=dedicated locations.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Only value `"dedicated"` is supported for
   * this API.
   * @param {string} params.locationName - The name of the Direct Link location.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.LocationCrossConnectRouterCollection>>}
   */
  public listOfferingTypeLocationCrossConnectRouters(params: DirectLinkV1.ListOfferingTypeLocationCrossConnectRoutersParams): Promise<DirectLinkV1.Response<DirectLinkV1.LocationCrossConnectRouterCollection>> {
    const _params = extend({}, params);
    const requiredParams = ['offeringType', 'locationName'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'offering_type': _params.offeringType,
        'location_name': _params.locationName
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeLocationCrossConnectRouters');

      const parameters = {
        options: {
          url: '/offering_types/{offering_type}/locations/{location_name}/cross_connect_routers',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * List speed options.
   *
   * List the available Direct Link speeds.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.offeringType - The Direct Link offering type.  Current supported values are `"dedicated"`
   * and `"connect"`.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.OfferingSpeedCollection>>}
   */
  public listOfferingTypeSpeeds(params: DirectLinkV1.ListOfferingTypeSpeedsParams): Promise<DirectLinkV1.Response<DirectLinkV1.OfferingSpeedCollection>> {
    const _params = extend({}, params);
    const requiredParams = ['offeringType'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'offering_type': _params.offeringType
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferingTypeSpeeds');

      const parameters = {
        options: {
          url: '/offering_types/{offering_type}/speeds',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * ports
   ************************/

  /**
   * List ports.
   *
   * Retrieve list of available Direct Link connect ports.  These ports can be used to create Direct Link connect
   * gateways.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {string} [params.start] - A server-supplied token determining which resource to start the page on.
   * @param {number} [params.limit] - The number of resources to return on a page.
   * @param {string} [params.locationName] - Direct Link location short name.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.PortCollection>>}
   */
  public listPorts(params?: DirectLinkV1.ListPortsParams): Promise<DirectLinkV1.Response<DirectLinkV1.PortCollection>> {
    const _params = extend({}, params);

    return new Promise((resolve, reject) => {
      const query = {
        'version': this.version,
        'start': _params.start,
        'limit': _params.limit,
        'location_name': _params.locationName
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listPorts');

      const parameters = {
        options: {
          url: '/ports',
          method: 'GET',
          qs: query,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get port.
   *
   * Retrieve Direct Link Connect provider port.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.id - The port identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Port>>}
   */
  public getPort(params: DirectLinkV1.GetPortParams): Promise<DirectLinkV1.Response<DirectLinkV1.Port>> {
    const _params = extend({}, params);
    const requiredParams = ['id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getPort');

      const parameters = {
        options: {
          url: '/ports/{id}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /*************************
   * virtualConnections
   ************************/

  /**
   * List virtual connections.
   *
   * List a gateway's virtual connections.   For gateway in other account with virtual connections that connect to
   * network in this account.  Only virtual connections that connect to this account are returned.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnectionCollection>>}
   */
  public listGatewayVirtualConnections(params: DirectLinkV1.ListGatewayVirtualConnectionsParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnectionCollection>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayId'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'gateway_id': _params.gatewayId
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'listGatewayVirtualConnections');

      const parameters = {
        options: {
          url: '/gateways/{gateway_id}/virtual_connections',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Create virtual connection.
   *
   * Create a virtual connection to the specified network.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.name - The user-defined name for this virtual connection.  Virtual connection names are
   * unique within a gateway.  This is the name of the virtual connection itself, the network being connected may have
   * its own name attribute.
   * @param {string} params.type - The type of virtual connection.
   * @param {string} [params.networkId] - Unique identifier of the target network.  For type=vpc virtual connections
   * this is the CRN of the target VPC.  This field does not apply to type=classic connections.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public createGatewayVirtualConnection(params: DirectLinkV1.CreateGatewayVirtualConnectionParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayId', 'name', 'type'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'name': _params.name,
        'type': _params.type,
        'network_id': _params.networkId
      };

      const query = {
        'version': this.version
      };

      const path = {
        'gateway_id': _params.gatewayId
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'createGatewayVirtualConnection');

      const parameters = {
        options: {
          url: '/gateways/{gateway_id}/virtual_connections',
          method: 'POST',
          body,
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Delete virtual connection.
   *
   * Delete the virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.Empty>>}
   */
  public deleteGatewayVirtualConnection(params: DirectLinkV1.DeleteGatewayVirtualConnectionParams): Promise<DirectLinkV1.Response<DirectLinkV1.Empty>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'gateway_id': _params.gatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteGatewayVirtualConnection');

      const parameters = {
        options: {
          url: '/gateways/{gateway_id}/virtual_connections/{id}',
          method: 'DELETE',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Get virtual connection.
   *
   * Retrieve a virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public getGatewayVirtualConnection(params: DirectLinkV1.GetGatewayVirtualConnectionParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const query = {
        'version': this.version
      };

      const path = {
        'gateway_id': _params.gatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'getGatewayVirtualConnection');

      const parameters = {
        options: {
          url: '/gateways/{gateway_id}/virtual_connections/{id}',
          method: 'GET',
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

  /**
   * Update virtual connection.
   *
   * Update a virtual connection.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.gatewayId - Direct Link gateway identifier.
   * @param {string} params.id - The virtual connection identifier.
   * @param {string} [params.name] - The user-defined name for this virtual connection.  Virtual connection names are
   * unique within a gateway.  This is the name of the virtual connection itself, the network being connected may have
   * its own name attribute.
   * @param {string} [params.status] - Status of the virtual connection.  Virtual connections that span IBM Cloud
   * Accounts are created in approval_pending status.  The owner of the target network can accept or reject connection
   * requests by patching status to attached or rejected respectively.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>>}
   */
  public updateGatewayVirtualConnection(params: DirectLinkV1.UpdateGatewayVirtualConnectionParams): Promise<DirectLinkV1.Response<DirectLinkV1.GatewayVirtualConnection>> {
    const _params = extend({}, params);
    const requiredParams = ['gatewayId', 'id'];

    return new Promise((resolve, reject) => {
      const missingParams = getMissingParams(_params, requiredParams);
      if (missingParams) {
        return reject(missingParams);
      }

      const body = {
        'name': _params.name,
        'status': _params.status
      };

      const query = {
        'version': this.version
      };

      const path = {
        'gateway_id': _params.gatewayId,
        'id': _params.id
      };

      const sdkHeaders = getSdkHeaders(DirectLinkV1.DEFAULT_SERVICE_NAME, 'v1', 'updateGatewayVirtualConnection');

      const parameters = {
        options: {
          url: '/gateways/{gateway_id}/virtual_connections/{id}',
          method: 'PATCH',
          body,
          qs: query,
          path,
        },
        defaultOptions: extend(true, {}, this.baseOptions, {
          headers: extend(true, sdkHeaders, {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }, _params.headers),
        }),
      };

      return resolve(this.createRequest(parameters));
    });
  };

}

/*************************
 * interfaces
 ************************/

namespace DirectLinkV1 {

  /** Options for the `DirectLinkV1` constructor. */
  export interface Options extends UserOptions {

    /** Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to the
     *  current date may be provided. Specify the current date to request the latest version.
     */
    version: string;
  }

  /** An operation response. */
  export interface Response<T = any>  {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty { }

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listGateways` operation. */
  export interface ListGatewaysParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGateway` operation. */
  export interface CreateGatewayParams {
    /** The Direct Link Gateway template. */
    gatewayTemplate: GatewayTemplate;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteGateway` operation. */
  export interface DeleteGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGateway` operation. */
  export interface GetGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGateway` operation. */
  export interface UpdateGatewayParams {
    /** Direct Link gateway identifier. */
    id: string;
    /** Gateways with global routing (`true`) can connect to networks outside of their associated region. */
    global?: boolean;
    /** Use this field during LOA rejection to provide the reason for the rejection.
     *
     *  Only allowed for type=dedicated gateways.
     */
    loaRejectReason?: string;
    /** MACsec configuration information.  When patching any macsec_config fields, no other fields may be specified
     *  in the patch request.  Contact IBM support for access to MACsec.
     *
     *  A MACsec config cannot be added to a gateway created without MACsec.
     */
    macsecConfig?: GatewayMacsecConfigPatchTemplate;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered?: boolean;
    /** The unique user-defined name for this gateway. */
    name?: string;
    /** Gateway operational status.
     *
     *  For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its
     *  LOA.  When rejecting an LOA, provide reject reasoning in `loa_reject_reason`.
     *
     *  Only allowed for type=dedicated gateways.
     */
    operationalStatus?: UpdateGatewayConstants.OperationalStatus | string;
    /** Gateway speed in megabits per second. */
    speedMbps?: number;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGateway` operation. */
  export namespace UpdateGatewayConstants {
    /** Gateway operational status. For gateways pending LOA approval, patch operational_status to the appropriate value to approve or reject its LOA.  When rejecting an LOA, provide reject reasoning in `loa_reject_reason`. Only allowed for type=dedicated gateways. */
    export enum OperationalStatus {
      LOA_ACCEPTED = 'loa_accepted',
      LOA_REJECTED = 'loa_rejected',
    }
  }

  /** Parameters for the `createGatewayAction` operation. */
  export interface CreateGatewayActionParams {
    /** Direct Link Connect gateway identifier. */
    id: string;
    /** Action request. */
    action: CreateGatewayActionConstants.Action | string;
    /** BGP MD5 authentication key.
     *
     *  BGP MD5 keys must be type=standard.
     *
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authenticationKey?: GatewayActionTemplateAuthenticationKey;
    /** Required for create_gateway_approve requests to select the gateway's routing option.  Gateways with global
     *  routing (`true`) can connect to networks outside of their associated region.
     */
    global?: boolean;
    /** Required for create_gateway_approve requests to select the gateway's metered billing option.  When `true`
     *  gateway usage is billed per gigabyte.  When `false` there is no per gigabyte usage charge, instead a flat rate
     *  is charged for the gateway.
     */
    metered?: boolean;
    /** Set for create_gateway_approve requests to select the gateway's resource group.  If unspecified on
     *  create_gateway_approve, the account's [default resource
     *  group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
     */
    resourceGroup?: ResourceGroupIdentity;
    /** Specify attribute updates being approved or rejected, update_attributes_approve and update_attributes_reject
     *  actions must provide an updates field that matches the gateway's current pending changes.
     */
    updates?: JsonObject[];
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayAction` operation. */
  export namespace CreateGatewayActionConstants {
    /** Action request. */
    export enum Action {
      CREATE_GATEWAY_APPROVE = 'create_gateway_approve',
      CREATE_GATEWAY_REJECT = 'create_gateway_reject',
      DELETE_GATEWAY_APPROVE = 'delete_gateway_approve',
      DELETE_GATEWAY_REJECT = 'delete_gateway_reject',
      UPDATE_ATTRIBUTES_APPROVE = 'update_attributes_approve',
      UPDATE_ATTRIBUTES_REJECT = 'update_attributes_reject',
    }
  }

  /** Parameters for the `listGatewayCompletionNotice` operation. */
  export interface ListGatewayCompletionNoticeParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayCompletionNotice` operation. */
  export interface CreateGatewayCompletionNoticeParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    /** Completion notice PDF file. */
    upload?: NodeJS.ReadableStream|Buffer;
    /** The content type of upload. */
    uploadContentType?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listGatewayLetterOfAuthorization` operation. */
  export interface ListGatewayLetterOfAuthorizationParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayStatistics` operation. */
  export interface GetGatewayStatisticsParams {
    /** Direct Link Dedicated gateway identifier. */
    id: string;
    /** specify statistic to retrieve. */
    type: GetGatewayStatisticsConstants.Type | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `getGatewayStatistics` operation. */
  export namespace GetGatewayStatisticsConstants {
    /** specify statistic to retrieve. */
    export enum Type {
      MACSEC_MKA = 'macsec_mka',
      MACSEC_SECURITY = 'macsec_security',
    }
  }

  /** Parameters for the `listOfferingTypeLocations` operation. */
  export interface ListOfferingTypeLocationsParams {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    offeringType: ListOfferingTypeLocationsConstants.OfferingType | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeLocations` operation. */
  export namespace ListOfferingTypeLocationsConstants {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
      CONNECT = 'connect',
    }
  }

  /** Parameters for the `listOfferingTypeLocationCrossConnectRouters` operation. */
  export interface ListOfferingTypeLocationCrossConnectRoutersParams {
    /** The Direct Link offering type.  Only value `"dedicated"` is supported for this API. */
    offeringType: ListOfferingTypeLocationCrossConnectRoutersConstants.OfferingType | string;
    /** The name of the Direct Link location. */
    locationName: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeLocationCrossConnectRouters` operation. */
  export namespace ListOfferingTypeLocationCrossConnectRoutersConstants {
    /** The Direct Link offering type.  Only value `"dedicated"` is supported for this API. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
    }
  }

  /** Parameters for the `listOfferingTypeSpeeds` operation. */
  export interface ListOfferingTypeSpeedsParams {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    offeringType: ListOfferingTypeSpeedsConstants.OfferingType | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `listOfferingTypeSpeeds` operation. */
  export namespace ListOfferingTypeSpeedsConstants {
    /** The Direct Link offering type.  Current supported values are `"dedicated"` and `"connect"`. */
    export enum OfferingType {
      DEDICATED = 'dedicated',
      CONNECT = 'connect',
    }
  }

  /** Parameters for the `listPorts` operation. */
  export interface ListPortsParams {
    /** A server-supplied token determining which resource to start the page on. */
    start?: string;
    /** The number of resources to return on a page. */
    limit?: number;
    /** Direct Link location short name. */
    locationName?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getPort` operation. */
  export interface GetPortParams {
    /** The port identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listGatewayVirtualConnections` operation. */
  export interface ListGatewayVirtualConnectionsParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createGatewayVirtualConnection` operation. */
  export interface CreateGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name: string;
    /** The type of virtual connection. */
    type: CreateGatewayVirtualConnectionConstants.Type | string;
    /** Unique identifier of the target network.  For type=vpc virtual connections this is the CRN of the target
     *  VPC.  This field does not apply to type=classic connections.
     */
    networkId?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createGatewayVirtualConnection` operation. */
  export namespace CreateGatewayVirtualConnectionConstants {
    /** The type of virtual connection. */
    export enum Type {
      CLASSIC = 'classic',
      VPC = 'vpc',
    }
  }

  /** Parameters for the `deleteGatewayVirtualConnection` operation. */
  export interface DeleteGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getGatewayVirtualConnection` operation. */
  export interface GetGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateGatewayVirtualConnection` operation. */
  export interface UpdateGatewayVirtualConnectionParams {
    /** Direct Link gateway identifier. */
    gatewayId: string;
    /** The virtual connection identifier. */
    id: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name?: string;
    /** Status of the virtual connection.  Virtual connections that span IBM Cloud Accounts are created in
     *  approval_pending status.  The owner of the target network can accept or reject connection requests by patching
     *  status to attached or rejected respectively.
     */
    status?: UpdateGatewayVirtualConnectionConstants.Status | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateGatewayVirtualConnection` operation. */
  export namespace UpdateGatewayVirtualConnectionConstants {
    /** Status of the virtual connection.  Virtual connections that span IBM Cloud Accounts are created in approval_pending status.  The owner of the target network can accept or reject connection requests by patching status to attached or rejected respectively. */
    export enum Status {
      ATTACHED = 'attached',
      REJECTED = 'rejected',
    }
  }

  /*************************
   * model interfaces
   ************************/

  /** Cross Connect Router details. */
  export interface CrossConnectRouter {
    /** Array of capabilities for this router. */
    capabilities?: string[];
    /** The name of the Router. */
    router_name?: string;
    /** Count of existing Direct Link Dedicated gateways on this router for this account. */
    total_connections?: number;
  }

  /** gateway. */
  export interface Gateway {
    /** BGP MD5 authentication key.
     *
     *  BGP MD5 keys must be type=standard.
     *
     *  The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII
     *  characters in length.
     *
     *  To clear the optional `authentication_key` field patch its crn to `""`.
     */
    authentication_key?: GatewayAuthenticationKey;
    /** Customer BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR is deprecated and no longer recognized by the Direct Link APIs.
     *
     *  See bgp_cer_cidr and bgp_ibm_cidr fields instead for IP related information.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR. */
    bgp_cer_cidr?: string;
    /** IBM BGP ASN. */
    bgp_ibm_asn?: number;
    /** BGP IBM CIDR. */
    bgp_ibm_cidr?: string;
    /** Gateway BGP status. The list of enumerated values for this property may expand in the future. Code and
     *  processes using this field  must tolerate unexpected values.
     */
    bgp_status?: string;
    /** Carrier name.  Only set for type=dedicated gateways. */
    carrier_name?: string;
    /** Changes pending approval for provider managed Direct Link Connect gateways. */
    change_request?: GatewayChangeRequest;
    /** Reason for completion notice rejection.  Only included on type=dedicated gateways with a rejected completion
     *  notice.
     */
    completion_notice_reject_reason?: string;
    /** The date and time resource was created. */
    created_at: string;
    /** The CRN (Cloud Resource Name) of this gateway. */
    crn: string;
    /** Cross connect router.  Only included on type=dedicated gateways. */
    cross_connect_router?: string;
    /** Customer name.  Only set for type=dedicated gateways. */
    customer_name?: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** The unique identifier of this gateway. */
    id: string;
    /** Gateway link status.  Only included on type=dedicated gateways. The list of enumerated values for this
     *  property may expand in the future. Code and processes using this field  must tolerate unexpected values.
     */
    link_status?: string;
    /** Gateway location long name. */
    location_display_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration
     *  information.  Contact IBM support for access to MACsec.
     */
    macsec_config?: GatewayMacsecConfig;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Gateway operational status. The list of enumerated values for this property may expand in the future. Code
     *  and processes using this field  must tolerate unexpected values.
     */
    operational_status: string;
    /** gateway port for type=connect gateways. */
    port?: GatewayPort;
    /** Indicates whether gateway changes must be made via a provider portal. */
    provider_api_managed?: boolean;
    /** Resource group reference. */
    resource_group?: ResourceGroupReference;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Offering type. The list of enumerated values for this property may expand in the future. Code and processes
     *  using this field  must tolerate unexpected values.
     */
    type: string;
    /** VLAN allocated for this gateway.  Only set for type=connect gateways. */
    vlan?: number;
  }

  /** BGP MD5 authentication key. BGP MD5 keys must be type=standard. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayActionTemplateAuthenticationKey {
    /** connectivity association key crn. */
    crn: string;
  }

  /** BGP MD5 authentication key. BGP MD5 keys must be type=standard. The key material that you provide must be base64 encoded and original string must be maximum 126 ASCII characters in length. To clear the optional `authentication_key` field patch its crn to `""`. */
  export interface GatewayAuthenticationKey {
    /** connectivity association key crn. */
    crn: string;
  }

  /** GatewayChangeRequest. */
  export interface GatewayChangeRequest {
  }

  /** GatewayCollection. */
  export interface GatewayCollection {
    /** Collection of Direct Link gateways. */
    gateways: Gateway[];
  }

  /** MACsec configuration information.  For Dedicated Gateways with MACsec configured, return configuration information.  Contact IBM support for access to MACsec. */
  export interface GatewayMacsecConfig {
    /** Indicate whether MACsec should currently be active (true) or inactive (false) for a MACsec enabled gateway.
     *   To be MACsec enabled a `macsec_config` must be specified at gateway create time.
     */
    active: boolean;
    /** Active connectivity association key.
     *
     *  During normal operation `active_cak` will match the desired `primary_cak`.  During CAK changes this field can be
     *  used to indicate which key is currently active on the gateway.
     */
    active_cak?: GatewayMacsecConfigActiveCak;
    /** SAK cipher suite. */
    cipher_suite?: string;
    /** confidentiality offset. */
    confidentiality_offset?: number;
    /** cryptographic algorithm. */
    cryptographic_algorithm?: string;
    /** fallback connectivity association key. */
    fallback_cak?: GatewayMacsecConfigFallbackCak;
    /** key server priority. */
    key_server_priority?: number;
    /** desired primary connectivity association key. */
    primary_cak: GatewayMacsecConfigPrimaryCak;
    /** Secure Association Key (SAK) expiry time in seconds. */
    sak_expiry_time?: number;
    /** Packets without MACsec headers are dropped when security_policy is `must_secure`. */
    security_policy?: string;
    /** Current status of MACsec on this gateway.
     *
     *  Status 'offline' is returned during gateway creation and deletion.
     */
    status: string;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Active connectivity association key. During normal operation `active_cak` will match the desired `primary_cak`.  During CAK changes this field can be used to indicate which key is currently active on the gateway. */
  export interface GatewayMacsecConfigActiveCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** fallback connectivity association key. */
  export interface GatewayMacsecConfigFallbackCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** MACsec configuration information.  When patching any macsec_config fields, no other fields may be specified in the patch request.  Contact IBM support for access to MACsec. A MACsec config cannot be added to a gateway created without MACsec. */
  export interface GatewayMacsecConfigPatchTemplate {
    /** Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled
     *  gateway.
     */
    active?: boolean;
    /** Fallback connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     *
     *  To clear the optional `fallback_cak` field patch its crn to `""`.
     *
     *  A gateway's `fallback_cak` crn cannot match its `primary_cak` crn.
     */
    fallback_cak?: GatewayMacsecConfigPatchTemplateFallbackCak;
    /** Desired primary connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     *
     *  A gateway's `primary_cak` crn cannot match its `fallback_cak` crn.
     */
    primary_cak?: GatewayMacsecConfigPatchTemplatePrimaryCak;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Fallback connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. To clear the optional `fallback_cak` field patch its crn to `""`. A gateway's `fallback_cak` crn cannot match its `primary_cak` crn. */
  export interface GatewayMacsecConfigPatchTemplateFallbackCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** Desired primary connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. A gateway's `primary_cak` crn cannot match its `fallback_cak` crn. */
  export interface GatewayMacsecConfigPatchTemplatePrimaryCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** desired primary connectivity association key. */
  export interface GatewayMacsecConfigPrimaryCak {
    /** connectivity association key crn. */
    crn: string;
    /** connectivity association key status. */
    status: string;
  }

  /** MACsec configuration information.  Contact IBM support for access to MACsec. */
  export interface GatewayMacsecConfigTemplate {
    /** Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled
     *  gateway.
     */
    active: boolean;
    /** Fallback connectivity association key.
     *
     *  The `fallback_cak` crn cannot match the `primary_cak` crn.
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     */
    fallback_cak?: GatewayMacsecConfigTemplateFallbackCak;
    /** Desired primary connectivity association key.
     *
     *  MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters
     *  [a-fA-F0-9].
     *  The key material must be exactly 64 characters in length and contain only [a-fA-F0-9].
     */
    primary_cak: GatewayMacsecConfigTemplatePrimaryCak;
    /** replay protection window size. */
    window_size?: number;
  }

  /** Fallback connectivity association key. The `fallback_cak` crn cannot match the `primary_cak` crn. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. */
  export interface GatewayMacsecConfigTemplateFallbackCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** Desired primary connectivity association key. MACsec keys must be type=standard with key name lengths between 2 to 64 inclusive and contain only characters [a-fA-F0-9]. The key material must be exactly 64 characters in length and contain only [a-fA-F0-9]. */
  export interface GatewayMacsecConfigTemplatePrimaryCak {
    /** connectivity association key crn. */
    crn: string;
  }

  /** gateway port for type=connect gateways. */
  export interface GatewayPort {
    /** Port Identifier. */
    id: string;
  }

  /** Select Port Label for new type=connect gateway. */
  export interface GatewayPortIdentity {
    /** port id. */
    id: string;
  }

  /** Gateway statistics.  Currently data retrieval is only supported for MACsec configurations. */
  export interface GatewayStatistic {
    /** Date and time data was collected. */
    created_at: string;
    /** statistics output. */
    data: string;
    /** statistic type. */
    type: string;
  }

  /** gateway statistics. */
  export interface GatewayStatisticCollection {
    /** Collection of gateway statistics. */
    statistics: GatewayStatistic[];
  }

  /** Create gateway template. */
  export interface GatewayTemplate {
    /** BGP ASN. */
    bgp_asn: number;
    /** (DEPRECATED) BGP base CIDR.
     *
     *  Field is deprecated.  See bgp_ibm_cidr and bgp_cer_cidr for details on how to create a gateway using either
     *  automatic or explicit IP assignment.  Any bgp_base_cidr value set will be ignored.
     *
     *  Deprecated field bgp_base_cidr will be removed from the API specificiation after 15-MAR-2021.
     */
    bgp_base_cidr?: string;
    /** BGP customer edge router CIDR.
     *
     *  For auto IP assignment, omit bgp_cer_cidr and bgp_ibm_cidr.  IBM will automatically select values for
     *  bgp_cer_cidr and bgp_ibm_cidr.
     *
     *  For explicit IP assignment set a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must reside in one of
     *  "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and
     *  bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_cer_cidr?: string;
    /** BGP IBM CIDR.
     *
     *  For auto IP assignment, omit bgp_cer_cidr and bgp_ibm_cidr.  IBM will automatically select values for
     *  bgp_cer_cidr and bgp_ibm_cidr.
     *
     *  For explicit IP assignment set a valid bgp_cer_cidr and bgp_ibm_cidr CIDR, the value must reside in one of
     *  "10.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16", "169.254.0.0/16" or an owned public CIDR.  bgp_cer_cidr and
     *  bgp_ibm_cidr must have matching network and subnet mask values.
     */
    bgp_ibm_cidr?: string;
    /** Gateways with global routing (`true`) can connect to networks outside their associated region. */
    global: boolean;
    /** Metered billing option.  When `true` gateway usage is billed per gigabyte.  When `false` there is no per
     *  gigabyte usage charge, instead a flat rate is charged for the gateway.
     */
    metered: boolean;
    /** The unique user-defined name for this gateway. */
    name: string;
    /** Resource group for this resource. If unspecified, the account's [default resource
     *  group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
     */
    resource_group?: ResourceGroupIdentity;
    /** Gateway speed in megabits per second. */
    speed_mbps: number;
    /** Offering type. */
    type: string;
  }

  /** Virtual connection. */
  export interface GatewayVirtualConnection {
    /** The date and time resource was created. */
    created_at: string;
    /** The unique identifier for this virtual connection. */
    id: string;
    /** The user-defined name for this virtual connection.  Virtual connection names are unique within a gateway.
     *  This is the name of the virtual connection itself, the network being connected may have its own name attribute.
     */
    name: string;
    /** For virtual connections across two different IBM Cloud Accounts network_account indicates the account that
     *  owns the target network.
     */
    network_account?: string;
    /** Unique identifier of the target network.  For type=vpc virtual connections this is the CRN of the target
     *  VPC.  This field does not apply to type=classic connections.
     */
    network_id?: string;
    /** Status of the virtual connection.
     *
     *  The list of enumerated values for this property may expand in the future. Code and processes using this field
     *  must tolerate unexpected values.
     */
    status: string;
    /** Virtual connection type.
     *
     *  The list of enumerated values for this property may expand in the future. Code and processes using this field
     *  must tolerate unexpected values.
     */
    type: string;
  }

  /** Virtual connection collection. */
  export interface GatewayVirtualConnectionCollection {
    /** virtual connection array. */
    virtual_connections: GatewayVirtualConnection[];
  }

  /** location collection. */
  export interface LocationCollection {
    /** Collection of Direct Link locations. */
    locations: LocationOutput[];
  }

  /** List of cross connect router details. */
  export interface LocationCrossConnectRouterCollection {
    /** Array of Routers for this location. */
    cross_connect_routers?: CrossConnectRouter[];
  }

  /** location. */
  export interface LocationOutput {
    /** Billing location.  Only present for locations where provisioning is enabled. */
    billing_location?: string;
    /** Building colocation owner.  Only present for offering_type=dedicated locations where provisioning is
     *  enabled.
     */
    building_colocation_owner?: string;
    /** Location long name. */
    display_name: string;
    /** Location type. */
    location_type: string;
    /** Indicate whether location supports MACsec.  Only returned for gateway type=dedicated locations.  Contact IBM
     *  support for access to MACsec.
     */
    macsec_enabled?: boolean;
    /** Location market. */
    market: string;
    /** Location geography.  Only present for locations where provisioning is enabled. */
    market_geography?: string;
    /** Is location a multi-zone region (MZR).  Only present for locations where provisioning is enabled. */
    mzr?: boolean;
    /** Location short name. */
    name: string;
    /** Location offering type. */
    offering_type: string;
    /** Indicates for the specific offering_type whether this location supports gateway provisioning. */
    provision_enabled: boolean;
    /** Location's VPC region.  Only present for locations where provisioning is enabled. */
    vpc_region?: string;
  }

  /** Speed. */
  export interface OfferingSpeed {
    /** Array of capabilities for billing option. */
    capabilities: string[];
    /** Link speed in megabits per second. */
    link_speed: number;
    /** Indicate whether speed supports MACsec.  Only returned for gateway type=dedicated speeds.  Contact IBM
     *  support for access to MACsec.
     */
    macsec_enabled?: boolean;
  }

  /** OfferingSpeedCollection. */
  export interface OfferingSpeedCollection {
    /** speed list. */
    speeds: OfferingSpeed[];
  }

  /** Provider port details. */
  export interface Port {
    /** Count of existing Direct Link gateways in this account on this port. */
    direct_link_count: number;
    /** Port identifier. */
    id: string;
    /** Port Label. */
    label: string;
    /** Port location long name. */
    location_display_name: string;
    /** Port location name identifier. */
    location_name: string;
    /** Port's provider name. */
    provider_name: string;
    /** Port's supported speeds in megabits per second. */
    supported_link_speeds: number[];
  }

  /** List of port label details. */
  export interface PortCollection {
    /** A reference to the first page of resources. */
    first: PortsPaginatedCollectionFirst;
    /** The maximum number of resources can be returned by the request. */
    limit: number;
    /** A reference to the next page of resources; this reference is included for all pages except the last page. */
    next?: PortsPaginatedCollectionNext;
    /** The total number of resources across all pages. */
    total_count: number;
    /** Array of ports. */
    ports?: Port[];
  }

  /** A reference to the first page of resources. */
  export interface PortsPaginatedCollectionFirst {
    /** The URL for the first page of resources. */
    href: string;
  }

  /** A reference to the next page of resources; this reference is included for all pages except the last page. */
  export interface PortsPaginatedCollectionNext {
    /** URL for the next page of resources. */
    href: string;
    /** start token for the next page of resources. */
    start?: string;
  }

  /** Resource group for this resource. If unspecified, the account's [default resource group](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used. */
  export interface ResourceGroupIdentity {
    /** Resource group identifier. */
    id: string;
  }

  /** Resource group reference. */
  export interface ResourceGroupReference {
    /** Resource group identifier. */
    id: string;
  }

  /** gateway create. */
  export interface GatewayChangeRequestGatewayClientGatewayCreate extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
  }

  /** gateway delete. */
  export interface GatewayChangeRequestGatewayClientGatewayDelete extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
  }

  /** gateway attributes update. */
  export interface GatewayChangeRequestGatewayClientGatewayUpdateAttributes extends GatewayChangeRequest {
    /** type of gateway change request. */
    type: string;
    /** array of pending updates. */
    updates: JsonObject[];
  }

  /** Gateway fields specific to type=connect gateway create. */
  export interface GatewayTemplateGatewayTypeConnectTemplate extends GatewayTemplate {
    /** Select Port Label for new type=connect gateway. */
    port: GatewayPortIdentity;
  }

  /** Gateway fields specific to type=dedicated gateway create. */
  export interface GatewayTemplateGatewayTypeDedicatedTemplate extends GatewayTemplate {
    /** Carrier name. */
    carrier_name: string;
    /** Cross connect router. */
    cross_connect_router: string;
    /** Customer name. */
    customer_name: string;
    /** Gateway location. */
    location_name: string;
    /** MACsec configuration information.  Contact IBM support for access to MACsec. */
    macsec_config?: GatewayMacsecConfigTemplate;
  }

}

export = DirectLinkV1;
